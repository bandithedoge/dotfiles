#+property: header-args :tangle "init.el"

# TODO: fix occasional hangups and random crashes
* Initial optimization
#+begin_src emacs-lisp :tangle "early-init.el"
  (setq auto-mode-case-fold nil
        bidi-inhibit-bpa t
        custom-file (make-temp-file "custom-" nil ".el")
        fast-but-imprecise-scrolling t
        frame-inhibit-implied-resize t
        frame-resize-pixelwise t
        highlight-nonselected-windows nil
        idle-update-delay 1.0
        inhibit-compacting-font-caches t
        inhibit-startup-echo-area-message user-login-name
        inhibit-startup-screen t
        initial-major-mode 'fundamental-mode
        initial-scratch-message nil
        pgtk-wait-for-event-timeout 0.001
        redisplay-skip-fontification-on-input t)

  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right
                cursor-in-non-selected-windows nil
                mode-line-format nil)

  (advice-add #'display-startup-echo-area-message :override #'ignore)
  (advice-add #'display-startup-screen :override #'ignore)

  ;; (define-advice load-file (:override (file) silence)
  ;;   (load file nil 'nomessage))

  ;; (define-advice startup--load-user-init-file (:before (&rest _) undo-silence)
  ;;   (advice-remove #'load-file #'load-file@silence))

  (put 'mode-line-format 'initial-value (default-toplevel-value 'mode-line-format))
  (dolist (buf (buffer-list))
    (with-current-buffer buf (setq mode-line-format nil)))

  (push '(fullscreen . maximized) initial-frame-alist)

  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (push '(horizontal-scroll-bars) default-frame-alist)
  (setq menu-bar-mode nil
        tool-bar-mode nil
        scroll-bar-mode nil)

  (defvar +init-file-loaded-p nil)

  (when (not +init-file-loaded-p)
    (load (expand-file-name "init.el" user-emacs-directory) nil 'nomessage 'nosuffix)
    (setq +init-file-loaded-p t))
#+end_src
* Package setup
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                             ("melpa" . "https://melpa.org/packages/"))))

  ;; TODO: move to leaf?
  (eval-when-compile
    (require 'use-package))

  (setq use-package-always-defer t
        use-package-always-ensure t
        use-package-compute-statistics t)
#+end_src
* Emacs
#+begin_src emacs-lisp
  (use-package gcmh
    :demand t
    :custom
    (gcmh-idle-delay 'auto)
    (gcmh-auto-idle-delay-factor 10)
    (gcmh-high-cons-threshold (* 100 1024 1024))
    :config
    (gcmh-mode))

  (use-package emacs
    :init
    (set-face-attribute 'default nil
                        :family mono-font
                        :height 110)
    (set-face-attribute 'variable-pitch nil
                        :family ui-font
                        :height 130)
    (global-visual-line-mode)
    :custom
    (ad-redefinition-action 'accept)
    (adaptive-fill-mode nil)
    (auto-save-default nil)
    (auto-save-include-big-deletions t)
    (auto-window-vscroll nil)
    (backup-by-copying t)
    (confirm-nonexistent-file-or-buffer nil)
    (create-lockfiles nil)
    (custom-search-field nil)
    (debug-on-error init-file-debug)
    (delete-old-versions t)
    (echo-keystrokes 0.02)
    (enable-recursive-minibuffers t)
    (find-file-suppress-same-file-warnings t)
    (find-file-visit-truename t)
    (frame-resize-pixelwise t)
    (frame-title-format '("%b - Emacs"))
    (hscroll-margin 2)
    (hscroll-step 1)
    (icon-title-format frame-title-format)
    (indicate-buffer-boundaries nil)
    (indicate-empty-lines nil)
    (jka-compr-verbose init-file-debug)
    (kill-do-not-save-duplicates t)
    (make-backup-files nil)
    (minibuffer-prompt-properties '(read-only t intangible t cursor-intangible t face minibuffer-prompt))
    (mouse-wheel-scroll-amount '(2 ((shift) . hscroll)))
    (mouse-wheel-scroll-amount-horizontal 2)
    (mouse-yank-at-point t)
    (require-final-newline t)
    (resize-mini-windows 'grow-only)
    (ring-bell-function #'ignore)
    (scroll-conservatively 10)
    (scroll-margin 0)
    (scroll-preserve-screen-position t)
    (sentence-end-double-space nil)
    (split-height-threshold nil)
    (split-width-threshold 160)
    (suggest-key-bindings 0)
    (truncate-partial-width-windows nil)
    (use-dialog-box nil)
    (use-short-answers t)
    (version-control t)
    (warning-suppress-types '((defvaralias)))
    (window-resize-pixelwise nil)
    :config
    (setq-default fill-column 80
                  tab-always-indent nil
                  tab-width 4
                  truncate-lines t
                  word-wrap t)
    (tooltip-mode -1)
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    (use-package savehist
      :ensure nil
      :custom
      (savehist-save-minibuffer-history t)
      (savehist-autosave-interval nil)
      (savehist-additional-variables '(kill-ring register-alist mark-ring global-mark-ring search-ring regexp-search-ring))
      :config
      (savehist-mode))
    (use-package display-line-numbers
      :ensure nil
      :custom
      (display-line-numbers-type 'relative)
      (display-line-numbers-width 3)
      (display-line-numbers-grow-only t)
      :hook ((prog-mode text-mode) . display-line-numbers-mode))
    (use-package hl-line
      :ensure nil
      :config
      (global-hl-line-mode))
    (use-package paren
      :ensure nil
      :custom
      (show-paren-delay 0.1)
      (show-paren-highlight-openparen t)
      (show-paren-when-point-in-periphery t)
      (show-paren-when-point-inside-paren t))
    (use-package subword
      :ensure nil
      :config
      (global-subword-mode)))

  (use-package better-defaults)

  (use-package no-littering)
#+end_src
* Helpers
#+begin_src emacs-lisp
  (defmacro +eglot-config! (server plist)
    "Set LSP configuration options for SERVER to PLIST."
    `(general-after 'eglot
       (setq-default eglot-workspace-configuration
                     (plist-put eglot-workspace-configuration ,server ,plist))))
#+end_src
* Theme
#+begin_src emacs-lisp :tangle "doom-rice-theme.el"
  ;; TODO: evil-ex prompt
  (require 'doom-themes)

  (def-doom-theme doom-rice
                  "Customized theme."
                  ((bg `(,base00))
                   (bg-alt `(,base10))
                   (fg `(,base05))
                   (fg-alt `(,base04))
                   (accent `(,base0F))

                   (base0 `(,base11))
                   (base1 `(,base10))
                   (base2 `(,base00))
                   (base3 `(,base01))
                   (base4 `(,base02))
                   (base5 `(,base07))
                   (base6 `(,base04))
                   (base7 `(,base05))
                   (base8 `(,base06))

                   (grey `(,base03))
                   (red `(,base08))
                   (light-red `(,base12))
                   (orange `(,base09))
                   (yellow `(,base0A))
                   (light-yellow `(,base13))
                   (green `(,base0B))
                   (light-green `(,base14))
                   (cyan `(,base0C))
                   (light-cyan `(,base15))
                   (blue `(,base0D))
                   (light-blue `(,base16))
                   (magenta `(,base0E))
                   (light-magenta `(,base17))

                   (violet light-magenta)
                   (dark-blue (doom-darken blue 0.2))
                   (teal light-green)
                   (dark-cyan (doom-darken cyan 0.2))

                   (highlight accent)
                   (vertical-bar base0)
                   (selection base4)
                   (builtin red)
                   (comments grey)
                   (doc-comments accent)
                   (constants orange)
                   (functions blue)
                   (keywords magenta)
                   (methods blue)
                   (operators fg)
                   (type yellow)
                   (strings green)
                   (variables base8)
                   (numbers orange)
                   (region base4)
                   (error red)
                   (warning yellow)
                   (success green)
                   (vc-modified magenta)
                   (vc-added green)
                   (vc-deleted red)

                   (modeline-fg fg)
                   (modeline-fg-alt grey)
                   (modeline-bg base4)
                   (modeline-bg-alt bg-alt))

                  (((line-number &override) :foreground grey :slant 'normal)
                   ((line-number-current-line &override) :foreground accent :weight 'bold :slant 'normal)
                   (eldoc-box-border :background accent)
                   (flymake-popon :background base4)
                   (origami-fold-header-face :background base4 :foreground grey)
                   (outline-1 :foreground magenta :weight 'bold)
                   (outline-2 :foreground blue :weight 'bold)
                   (outline-3 :foreground cyan :weight 'bold)
                   (outline-4 :foreground green :weight 'bold)
                   (outline-5 :foreground yellow :weight 'bold)
                   (outline-6 :foreground orange :weight 'bold)
                   (outline-7 :foreground light-magenta :weight 'bold)
                   (outline-8 :foreground light-blue :weight 'bold)
                   (prescient-primary-highlight :foreground accent :weight 'bold)
                   (prescient-secondary-highlight :foreground accent)
                   (tooltip :background base4 :foreground fg)
                   (vertico-current :background bg)
                   (eglot-inlay-hint-face :foreground grey :height 0.8)))
#+end_src

#+begin_src emacs-lisp
  (use-package nerd-icons
    :custom
    (nerd-icons-font-family "Symbols Nerd Font"))

  (use-package doom-themes
    :config
    (use-package all-the-icons)
    (load-theme 'doom-rice t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    (use-package solaire-mode
      :config
      (push '(treemacs-window-background-face . solaire-default-face) solaire-mode-remap-alist)
      (push '(treemacs-hl-line-face . solaire-hl-line-face) solaire-mode-remap-alist)
      (solaire-global-mode +1)))
#+end_src
* Keybindings
#+begin_src emacs-lisp
  (use-package general
    :demand t
    :custom
    (general-override-states '(insert
                               emacs
                               hybrid
                               normal
                               visual
                               motion
                               operator
                               replace)))

  (use-package evil
    :demand t
    :init
    (general-setq evil-want-keybinding nil)
    (use-package undo-fu)
    (use-package goto-chg)
    :custom
    (evil-echo-state nil)
    (evil-ex-interactive-search-highlight 'selected-window)
    (evil-ex-search-vim-style-regexp t)
    (evil-ex-visual-char-range t)
    (evil-kbd-macro-suppress-motion-error t)
    (evil-mode-line-format 'nil)
    (evil-symbol-word-search t)
    (evil-undo-system 'undo-fu)
    (evil-visual-state-cursor 'hollow)
    (evil-visual-update-x-selection-p nil)
    (evil-want-C-g-bindings t)
    (evil-want-C-u-scroll t)
    (evil-want-Y-yank-to-eol t)
    :config
    (evil-mode 1)
    (evil-set-leader 'motion (kbd "SPC"))
    (evil-set-leader 'motion (kbd "<backspace>") t)
    (general-add-hook 'after-change-major-mode-hook
                      (lambda ()
                        (setq-local evil-shift-width tab-width)))
    (use-package evil-better-visual-line
      :config
      (evil-better-visual-line-on))
    (use-package evil-collection
      :custom
      (evil-collection-key-blacklist '("SPC" "<backspace>"))
      :config
      (setq evil-collection-mode-list (delq 'eglot evil-collection-mode-list))
      (evil-collection-init))
    (use-package evil-goggles
      :config
      (evil-goggles-mode)
      (evil-goggles-use-diff-faces)))

  (general-auto-unbind-keys)
  (general-evil-setup t)

  (general-create-definer +leader-def
    :states 'm
    :keymaps 'override
    :prefix "SPC")

  (general-create-definer +localleader-def
    :states 'm
    :keymaps 'override
    :prefix "<backspace>")

  (general-create-definer +lang-def
    :states 'm
    :keymaps 'override
    :prefix "<backspace><backspace>")

  (+leader-def
    "h" '(:ignore t :wk "+help")
    "w" '("Kill buffer" . kill-this-buffer)
    "W" '("Close window" . evil-window-delete))

  (+localleader-def
    :keymaps 'override
    "<backspace>" '(:ignore t :wk "+lang"))

  (use-package evil-nerd-commenter
    :commands (evilnc-comment-operator evilnc-inner-comment evilnc-outer-commenter)
    :general
    (:states 'm
             "gc" 'evilnc-comment-operator))

  (use-package evil-traces
    :after evil-ex
    :config
    (evil-traces-mode))

  (use-package evil-visualstar
    :commands (evil-visualstar/begin-search evil-visualstar/begin-search-forward evil-visualstar/begin-search-backward)
    :general
    (:states 'v
             "*" 'evil-visualstar/begin-search-forward
             "#" 'evil-visualstar/begin-search-backward))
#+end_src
* Utilities
** Compiler explorer
#+begin_src emacs-lisp
  (use-package rmsbolt)
#+end_src
** Debugger
#+begin_src emacs-lisp
  ;; (use-package dap-mode
  ;;   :after lsp-mode
  ;;   :gfhook
  ;;   #'dap-tooltip-mode
  ;;   ('dap-stopped-hook (lambda (arg) (call-interactively #'dap-hydra)))
  ;;   :general
  ;;   (+localleader-def
  ;;     "ld" '("Debug" . dap-hydra))
  ;;   :custom
  ;;   (dap-auto-configure-features '(sessions locals breakpoints expressions))
  ;;   :config
  ;;   (general-after 'c-ts-mode
  ;;     (require 'dap-gdb-lldb)
  ;;     (dap-gdb-lldb-setup))
  ;;   ;; TODO: fix dap-python
  ;;   (general-after 'python-mode
  ;;     (require 'dap-python)
  ;;     (general-setq dap-python-debugger 'debugpy)))

  (use-package dape
    :after projectile eglot
    :ghook
    ('kill-emacs-hook #'dape-breakpoint-save)
    ('after-init-hook #'dape-breakpoint-load)
    :gfhook
    ('dape-compile-compile-hooks #'kill-buffer)
    ('dape-on-start-hooks (lambda () (save-some-buffers t t)))
    ('dape-on-stopped-hooks (list #'dape-info #'dape-repl))
    :custom
    (dape-buffer-window-arrangement 'right)
    (dape-cwd-fn #'projectile-project-root)
    :config
    (dape-breakpoint-global-mode))
#+end_src
** Direnv
#+begin_src emacs-lisp
  (use-package envrc
    :config
    (envrc-global-mode))
#+end_src
** EditorConfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1)
    (use-package editorconfig-generate))
#+end_src
** Git
#+begin_src emacs-lisp
  (use-package vc
    :ensure nil
    :custom
    (vc-git-diff-switches '("--histogram"))
    (vc-follow-symlinks t)
    (vc-handled-backends nil))

  ;; TODO: gracefully kill buffers on exit
  (use-package magit
    :general
    (+leader-def
      "g" '("Git" . magit))
    :general-config
    (:keymaps 'transient-map
              [escape] 'transient-quit-one)
    (:keymaps 'magit-mode-map
              "SPC" nil)
    :gfhook ('magit-process-mode-hook #'goto-address-mode)
    :custom
    (magit-bury-buffer-function #'magit-mode-quit-window)
    (magit-diff-refine-hunk t)
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    (magit-revision-insert-related-refs nil)
    (magit-save-repository-buffers nil)
    (transient-default-level 5)
    (transient-display-buffer-action '(display-buffer-below-selected))
    :config
    (let* ((xdg-config-home (or (getenv "XDG_CONFIG_HOME")
                                (expand-file-name "~/.config/")))
           (socket (expand-file-name "git/credential/socket" xdg-config-home)))
      (setq magit-credential-cache-daemon-socket socket))
    (use-package magit-todos
      :general-config
      (:keymaps 'magit-todos-item-section-map
                "k" 'evil-previous-line)
      :ghook 'magit-mode-hook
      :custom
      (magit-todos-keyword-suffix "\\(?:([^)]+)\\)?:?"))
    (use-package magit-lfs))

  (use-package gitignore-templates
    :commands (gitignore-templates-insert gitignore-templates-new-file))

  (use-package bug-reference-github
    :ghook ('prog-mode-hook #'bug-reference-github-set-url-format))
#+end_src
** PDF
#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install-noverify))
#+end_src
** Project management
#+begin_src emacs-lisp
  (use-package projectile
    :custom
    (projectile-auto-discover nil)
    (projectile-globally-ignored-directories '("^\\.direnv$" "^\\result*$"))
    (projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o"))
    (projectile-globally-ignored-files '(".DS_Store" "TAGS"))
    (projectile-ignored-projects '("~/"))
    :config
    (projectile-mode 1))
#+end_src
** Snippets
#+begin_src emacs-lisp
  (use-package tempel
    :ghook ('(prog-mode-hook text-mode-hook)
            (lambda ()
              (setq-local completion-at-point-functions
                          (cons #'tempel-complete
                                completion-at-point-functions))))
    :config
    (use-package tempel-collection))
#+end_src
** Terminal emulator
#+begin_src emacs-lisp
  (use-package vterm
    :general
    (+leader-def
      "T" '("Terminal" . vterm))
    :custom
    (vterm-kill-buffer-on-exit t))
#+end_src
* Completion
#+begin_src emacs-lisp
  (use-package prescient
    :config
    (prescient-persist-mode)
    :custom
    (prescient-history-length 1000)
    (prescient-sort-full-matches-first t))
#+end_src
** At point
#+begin_src emacs-lisp
  ;; TODO: fix graphical glitching, elisp completions in other modes, weird manual completion behavior
  (use-package corfu
    :ghook 'prog-mode-hook 'text-mode-hook
    :after evil
    :general-config
    (:states 'i
             "C-SPC" 'completion-at-point)
    (:keymaps 'corfu-popupinfo-map
              "C-h" 'corfu-popupinfo-scroll-up
              "C-l" 'corfu-popupinfo-scroll-down)
    :custom
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-count 16)
    (corfu-cycle t)
    (corfu-left-margin-width 1)
    (corfu-margin-formatters '(nerd-icons-corfu-formatter))
    (corfu-max-width 120)
    (corfu-on-exact-match 'show)
    (corfu-popupinfo-delay '(0.5 . 0.25))
    (corfu-popupinfo-max-height 20)
    (corfu-preselect 'prompt)
    (corfu-preview-current nil)
    (corfu-quit-at-boundary t)
    (corfu-quit-no-match t)
    (corfu-right-margin-width 1)
    :config
    (use-package corfu-prescient
      :config
      (corfu-prescient-mode))
    (corfu-popupinfo-mode)
    (use-package nerd-icons-corfu))

  (use-package cape
    :init
    (general-add-hook 'completion-at-point-functions #'cape-file))

  ;; (use-package company
  ;;   :ghook 'prog-mode-hook 'text-mode-hook
  ;;   :gfhook #'evil-normalize-keymaps
  ;;   :after evil
  ;;   :general-config
  ;;   (:states 'i
  ;;            "C-SPC" 'company-complete)
  ;;   :custom
  ;;   (company-auto-commit nil)
  ;;   (company-backends '(company-capf))
  ;;   (company-dabbrev-downcase nil)
  ;;   (company-dabbrev-ignore-case nil)
  ;;   (company-dabbrev-other-buffers nil)
  ;;   (company-frontends '(company-pseudo-tooltip-frontend))
  ;;   (company-minimum-prefix-length 2)
  ;;   (company-require-match 'never)
  ;;   (company-selection-wrap-around t)
  ;;   (company-tooltip-align-annotations t)
  ;;   (company-tooltip-limit 14)
  ;;   :config
  ;;   (use-package company-box
  ;;     :ghook 'company-mode-hook
  ;;     :custom
  ;;     (company-box-backends-colors nil)
  ;;     (company-box-icons-alist 'company-box-icons-nerd-icons)
  ;;     (company-box-tooltip-limit 50)
  ;;     (x-gtk-resize-child-frames 'resize-mode)
  ;;     :config
  ;;     (setq company-box-icons-functions (cons #'+company-box-icons--elisp-fn
  ;;                                             (delq 'company-box-icons--elisp
  ;;                                                   company-box-icons-functions)))
  ;;     (defun +company-box-icons--elisp-fn (candidate)
  ;;       (when (derived-mode-p 'emacs-lisp-mode)
  ;;         (let ((sym (intern candidate)))
  ;;           (cond ((fboundp sym)  'ElispFunction)
  ;;                 ((boundp sym)   'ElispVariable)
  ;;                 ((featurep sym) 'ElispFeature)
  ;;                 ((facep sym)    'ElispFace)))))
  ;;     (setq company-box-icons-nerd-icons
  ;;           `((Unknown        . ,(nerd-icons-codicon  "nf-cod-code"                :face  'font-lock-warning-face))
  ;;             (Text           . ,(nerd-icons-codicon  "nf-cod-text_size"           :face  'font-lock-doc-face))
  ;;             (Method         . ,(nerd-icons-codicon  "nf-cod-symbol_method"       :face  'font-lock-function-name-face))
  ;;             (Function       . ,(nerd-icons-codicon  "nf-cod-symbol_method"       :face  'font-lock-function-name-face))
  ;;             (Constructor    . ,(nerd-icons-codicon  "nf-cod-triangle_right"      :face  'font-lock-function-name-face))
  ;;             (Field          . ,(nerd-icons-codicon  "nf-cod-symbol_field"        :face  'font-lock-variable-name-face))
  ;;             (Variable       . ,(nerd-icons-codicon  "nf-cod-symbol_variable"     :face  'font-lock-variable-name-face))
  ;;             (Class          . ,(nerd-icons-codicon  "nf-cod-symbol_class"        :face  'font-lock-type-face))
  ;;             (Interface      . ,(nerd-icons-codicon  "nf-cod-symbol_interface"    :face  'font-lock-type-face))
  ;;             (Module         . ,(nerd-icons-codicon  "nf-cod-file_submodule"      :face  'font-lock-preprocessor-face))
  ;;             (Property       . ,(nerd-icons-codicon  "nf-cod-symbol_property"     :face  'font-lock-variable-name-face))
  ;;             (Unit           . ,(nerd-icons-codicon  "nf-cod-symbol_ruler"        :face  'font-lock-constant-face))
  ;;             (Value          . ,(nerd-icons-codicon  "nf-cod-symbol_field"        :face  'font-lock-builtin-face))
  ;;             (Enum           . ,(nerd-icons-codicon  "nf-cod-symbol_enum"         :face  'font-lock-builtin-face))
  ;;             (Keyword        . ,(nerd-icons-codicon  "nf-cod-symbol_keyword"      :face  'font-lock-keyword-face))
  ;;             (Snippet        . ,(nerd-icons-codicon  "nf-cod-symbol_snippet"      :face  'font-lock-string-face))
  ;;             (Color          . ,(nerd-icons-codicon  "nf-cod-symbol_color"        :face  'success))
  ;;             (File           . ,(nerd-icons-codicon  "nf-cod-symbol_file"         :face  'font-lock-string-face))
  ;;             (Reference      . ,(nerd-icons-codicon  "nf-cod-references"          :face  'font-lock-variable-name-face))
  ;;             (Folder         . ,(nerd-icons-codicon  "nf-cod-folder"              :face  'font-lock-variable-name-face))
  ;;             (EnumMember     . ,(nerd-icons-codicon  "nf-cod-symbol_enum_member"  :face  'font-lock-builtin-face))
  ;;             (Constant       . ,(nerd-icons-codicon  "nf-cod-symbol_constant"     :face  'font-lock-constant-face))
  ;;             (Struct         . ,(nerd-icons-codicon  "nf-cod-symbol_structure"    :face  'font-lock-variable-name-face))
  ;;             (Event          . ,(nerd-icons-codicon  "nf-cod-symbol_event"        :face  'font-lock-warning-face))
  ;;             (Operator       . ,(nerd-icons-codicon  "nf-cod-symbol_operator"     :face  'font-lock-comment-delimiter-face))
  ;;             (TypeParameter  . ,(nerd-icons-codicon  "nf-cod-list_unordered"      :face  'font-lock-type-face))
  ;;             (Template       . ,(nerd-icons-codicon  "nf-cod-symbol_snippet"      :face  'font-lock-string-face))
  ;;             (ElispFunction  . ,(nerd-icons-codicon  "nf-cod-symbol_method"       :face  'font-lock-function-name-face))
  ;;             (ElispVariable  . ,(nerd-icons-codicon  "nf-cod-symbol_variable"     :face  'font-lock-variable-name-face))
  ;;             (ElispFeature   . ,(nerd-icons-codicon  "nf-cod-globe"               :face  'font-lock-builtin-face))
  ;;             (ElispFace      . ,(nerd-icons-codicon  "nf-cod-symbol_color"        :face  'success))))
  ;;     (add-to-list 'company-box-frame-parameters '(tab-bar-lines . 0))))
#+end_src
** Minibuffer
#+begin_src emacs-lisp
  ;; TODO: find-file
  (use-package vertico
    :general-config
    (:keymaps 'vertico-map
              "C-j" 'vertico-next
              "C-M-j" 'vertico-next-group
              "C-k" 'vertico-previous
              "C-M-j" 'vertico-next-group
              "C-u" 'vertico-scroll-down
              "C-d" 'vertico-scroll-up
              "RET" 'vertico-directory-enter
              "DEL" 'vertico-directory-delete-char)
    :custom
    (vertico-count 17)
    (vertico-cycle t)
    (vertico-multiform-categories '((buffer (vertico-sort-function . copy-sequence))))
    (read-file-name-completion-ignore-case t)
    (read-buffer-completion-ignore-case t)
    (completion-ignore-case t)
    (completion-in-region-function (lambda (&rest args))
         (apply (if vertico-mode
                    #'consult-completion-in-region
                  #'completion--in-region)
                args))
    :gfhook #'vertico-mouse-mode #'vertico-multiform-mode
    :config
    (vertico-mode)
    (use-package vertico-prescient
      :config
      (vertico-prescient-mode))
    (use-package marginalia
      :general-config
      (:keymaps 'minibuffer-local-map
                "C-h" 'marginalia-cycle)
      :init
      (marginalia-mode))
    (use-package nerd-icons-completion
      :ghook ('marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)
      :config
      (nerd-icons-completion-mode)))

  (use-package consult
    :general
    (+leader-def
      "SPC" '("Execute command" . execute-extended-command)
      "b" '("Switch buffer" . consult-buffer)
      "f" '("Find file" . find-file)))

  (use-package consult-dir
    :general
    ([remap list-directory] 'consult-dir))
#+end_src
* UI
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :after solaire-mode
    :custom
    (dashboard-center-content t)
    (dashboard-icon-type 'nerd-icons)
    (dashboard-items '((projects . 5)
                       (recents . 10)))
    (dashboard-path-style 'truncate-beginning)
    (dashboard-startup-banner 'logo)
    :config
    (dashboard-setup-startup-hook))
#+end_src
** ElDoc
#+begin_src emacs-lisp
  (use-package eldoc
    :custom
    (eldoc-idle-delay 0.1)
    :config
    (use-package eldoc-box
      :general
      (mmap
       "K" 'eldoc-box-help-at-point)
      :custom-face
      (eldoc-box-body ((t (:family ui-font))))))
#+end_src
** File tree
#+begin_src emacs-lisp
  ;; TODO: missing icons, prettier indent guides
  (use-package treemacs
    :after doom-themes
    :general
    (+leader-def
      "t" '("File tree" . treemacs))
    :general-config
    (:keymaps 'evil-treemacs-state-map
              "o v" 'treemacs-visit-node-horizontal-split
              "o s" 'treemacs-visit-node-vertical-split)
    :custom
    (treemacs-eldoc-display 'detailed)
    (treemacs-follow-after-init t)
    (treemacs-fringe-indicator-mode nil)
    (treemacs-indent-guide-mode t)
    (treemacs-no-png-images t)
    :custom-face
    (treemacs-directory-face ((t :inherit (variable-pitch))))
    :config
    (treemacs-follow-mode -1)
    (treemacs-git-mode 'deferred)
    (use-package treemacs-nerd-icons)
    (use-package treemacs-evil
      :after evil)
    (use-package treemacs-projectile
      :after projectile)
    (use-package treemacs-magit
      :after magit)
    (doom-themes-treemacs-config)
    (treemacs-load-theme "nerd-icons"))
#+end_src
** Folding
#+begin_src emacs-lisp
  (use-package origami
    :after evil
    :ghook ('(prog-mode-hook text-mode-hook)
            (lambda ()
              (setq-local origami-fold-style 'triple-braces)
              (origami-mode)
              (origami-close-all-nodes (current-buffer))))
    :general-config
    (:states 'm
             "TAB" 'evil-toggle-fold
             "<backtab>" 'origami-toggle-all-nodes
             [remap evil-toggle-fold] 'origami-recursively-toggle-node
             [remap evil-open-fold] 'origami-open-node
             [remap evil-open-folds] 'origami-open-all-nodes
             [remap evil-close-fold] 'origami-close-node
             [remap evil-close-folds] 'origami-close-all-nodes
             [remap evil-open-fold-rec] 'origami-open-node-recursively)
    :custom
    (origami-show-fold-header t)
    (origami-fold-replacement (nerd-icons-mdicon "nf-md-dots_horizontal")))
#+end_src
** Git
#+begin_src emacs-lisp
  (use-package diff-hl
    :ghook
    'find-file-hook
    ('magit-pre-refresh-hook #'diff-hl-magit-pre-refresh)
    ('magit-post-refresh-hook #'diff-hl-magit-post-refresh)
    :gfhook #'diff-hl-flydiff-mode
    :custom
    (diff-hl-flydiff-delay 0.5)
    (diff-hl-show-staged-changes nil))
#+end_src
** Help buffer
#+begin_src emacs-lisp
  (use-package helpful
    :general
    (+leader-def
      "hC" '("Command" . helpful-command)
      "hF" '("Face" . describe-face)
      "hM" '("Manpage" . woman)
      "hP" '("Package" . describe-package)
      "hc" '("Callable" . helpful-callable)
      "hg" '("Customize group" . customize-group)
      "hk" '("Key" . helpful-key)
      "hm" '("Manual" . info-display-manual)
      "hp" '("Thing at point" . helpful-at-point)
      "hv" '("Variable" . helpful-variable)))
#+end_src
** Indent guides
#+begin_src emacs-lisp
  ;; (use-package highlight-indent-guides
  ;;   :ghook
  ;;   'prog-mode-hook
  ;;   ('org-mode-local-vars-hook (lambda ()
  ;;                                (and highlight-indent-guides-mode
  ;;                                     (bound-and-true-p org-indent-mode)
  ;;                                     (highlight-indent-guides-mode -1))))
  ;;   :custom
  ;;   (highlight-indent-guides-method 'character)
  ;;   (highlight-indent-guides-auto-enabled nil))
  (use-package indent-bars
    :init
    (add-hook 'prog-mode-hook #'indent-bars-mode 100)
    :custom
    (indent-bars-color '(highlight :face-bg t :blend 0.15))
    (indent-bars-color-by-depth '(:regexp "outline-\\([0-9]+\\)" :blend 1))
    (indent-bars-highlight-current-depth '(:blend 0.5))
    (indent-bars-pattern ".")
    (indent-bars-width-frac 0.1)
    (indent-bars-prefer-character t))
#+end_src
** Info
#+begin_src emacs-lisp
  (use-package info-colors
    :ghook ('Info-selection-hook #'info-colors-fontify-mode))
#+end_src
** Keybindings
#+begin_src emacs-lisp
  (use-package which-key
    :custom
    (which-key-add-column-padding 1)
    (which-key-idle-delay 0.3)
    (which-key-max-display-columns nil)
    (which-key-min-display-lines 6)
    (which-key-prefix-prefix nil)
    (which-key-side-window-slot -10)
    (which-key-sort-order #'which-key-key-order-alpha)
    (which-key-sort-uppercase-first nil)
    :config
    (which-key-setup-side-window-bottom)
    (which-key-mode))
#+end_src
** Keywords
#+begin_src emacs-lisp
  (use-package hl-todo
    :ghook 'prog-mode-hook
    :custom
    (hl-todo-highlight-punctuation ":")
    (hl-todo-keyword-faces '(("TODO" warning bold)
                             ("FIXME" error bold)
                             ("REVIEW" font-lock-keyword-face bold)
                             ("HACK" font-lock-constant-face bold)
                             ("DEPRECATED" font-lock-doc-face bold)
                             ("NOTE" success bold)
                             ("BUG" error bold)
                             ("XXX" font-lock-constant-face bold))))
#+end_src
** Ligatures
#+begin_src emacs-lisp
  (use-package ligature
    :config
    (ligature-set-ligatures t '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "///" "/=" "/=="
                                "/>" "//" "/*" "*>" "***" "*/" "<-" "<<-" "<=>" "<=" "<|" "<||"
                                "<|||" "<|>" "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>" "<-|"
                                "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*"
                                "<*>" "<->" "<!--" ":>" ":<" ":::" "::" ":?" ":?>" ":=" "::=" "=>>"
                                "==>" "=/=" "=!=" "=>" "===" "=:=" "==" "!==" "!!" "!=" ">]" ">:"
                                ">>-" ">>=" ">=>" ">>>" ">-" ">=" "&&&" "&&" "|||>" "||>" "|>" "|]"
                                "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||" ".." ".?" ".=" ".-" "..<"
                                "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|" "??" "?." "?=" "?:" "##"
                                "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" ";;" "_|_"
                                "__" "~~" "~~>" "~>" "~-" "~@" "$>" "^=" "]#"))
    (global-ligature-mode t))
#+end_src
** Modeline
#+begin_src emacs-lisp
  ;; TODO: less confusing background colors
  (use-package doom-modeline
    :ghook 'after-init-hook
    :custom
    (doom-modeline-buffer-encoding 'nondefault)
    (doom-modeline-buffer-file-name-style 'relative-from-project)
    (doom-modeline-enable-word-count t)
    (doom-modeline-height 30)
    (doom-modeline-indent-info t)
    (doom-modeline-irc nil)
    (doom-modeline-time nil)
    :config
    (use-package anzu
      :config
      (global-anzu-mode +1)
      (use-package evil-anzu
        :after evil
        :config
        (global-anzu-mode +1))))

  ;; TODO: more modes
  (use-package hide-mode-line
    :ghook 'completion-list-mode-hook 'Man-mode-hook)
#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :ghook 'prog-mode-hook
    :custom-face
    (rainbow-delimiters-depth-1-face ((t (:inherit 'outline-1 :weight normal))))
    (rainbow-delimiters-depth-2-face ((t (:inherit 'outline-2 :weight normal))))
    (rainbow-delimiters-depth-3-face ((t (:inherit 'outline-3 :weight normal))))
    (rainbow-delimiters-depth-4-face ((t (:inherit 'outline-4 :weight normal))))
    (rainbow-delimiters-depth-5-face ((t (:inherit 'outline-5 :weight normal))))
    (rainbow-delimiters-depth-6-face ((t (:inherit 'outline-6 :weight normal))))
    (rainbow-delimiters-depth-7-face ((t (:inherit 'outline-7 :weight normal))))
    (rainbow-delimiters-depth-8-face ((t (:inherit 'outline-8 :weight normal))))
    :custom
    (rainbow-delimiters-max-face-count 8))
#+end_src
** Window switcher
#+begin_src emacs-lisp
  (use-package ace-window
    :general
    ([remap other-window] 'ace-window
     [remap evil-window-next] 'ace-window)
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-scope 'frame))
#+end_src
* Editing
** LSP
#+begin_src emacs-lisp
  (defun +format (&optional arg)
    (interactive "P")
    (call-interactively
     (if (and (bound-and-true-p eglot--managed-mode)
              (eglot--server-capable :documentFormattingProvider))
         #'eglot-format-buffer
       #'apheleia-format-buffer)))

  (use-package apheleia
    :general
    (+lang-def
      "f" '("Format" . +format)))

  (use-package eglot
    :commands eglot eglot-ensure
    :gfhook ('eglot-managed-mode-hook #'evil-normalize-keymaps)
    :general-config
    (+lang-def
      :keymaps 'eglot-mode-map
      "a" '("Code action" . eglot-code-actions)
      "r" '("Rename" . eglot-rename)
      "s" '(:ignore t :wk "+server")
      "sq" '("Shutdown" . eglot-shutdown)
      "sr" '("Reconnect" . eglot-reconnect))
    :custom
    (eglot-autoshutdown t)
    (eglot-sync-connect 1)
    (eglot-events-buffer-size 0)
    :config
    (use-package eglot-booster
      :config
      (eglot-booster-mode))
    (use-package eglot-tempel
      :ghook 'eglot-managed-mode-hook)
    (use-package eglot-signature-eldoc-talkative
      :ghook ('eglot-managed-mode-hook (lambda ()
                                         (setq-local eldoc-documentation-functions
                                                     (list
                                                      #'eglot-signature-eldoc-talkative
                                                      #'eglot-hover-eldoc-function
                                                      t
                                                      #'flymake-eldoc-function)))))
    (use-package consult-eglot
      :general
      (:keymaps 'eglot-mode-map
                [remap xref-find-apropos] 'consult-eglot-symbols)))

  (use-package eglot-ltex
    :ghook ('text-mode-hook (lambda ()
                              (require 'eglot-ltex)
                              (eglot-ensure)))
    :custom
    (eglot-ltex-communication-channel 'stdio)
    (eglot-ltex-active-modes '((org-mode :language-id "org")
                               (git-commit-elisp-text-mode :language-id "gitcommit")
                               (bibtex-mode :language-id "bibtex")
                               (context-mode :language-id "context")
                               (latex-mode :language-id "latex")
                               (markdown-mode :language-id "markdown")
                               (rst-mode :language-id "restructuredtext")))
    :init
    (general-add-advice #'eglot-ltex--server-entry
                        :override (lambda () "ltex-ls")))
#+end_src
** Parinfer
#+begin_src emacs-lisp
  (use-package parinfer-rust-mode
    :ghook 'emacs-lisp-mode-hook 'lisp-mode-hook 'fennel-mode-hook 'yuck-mode-hook
    :custom
    (parinfer-rust-auto-download t)
    (parinfer-rust-troublesome-modes 'nil))
#+end_src
** Smart parentheses
#+begin_src emacs-lisp
  (use-package smartparens
    :ghook 'prog-mode-hook 'text-mode-hook
    :custom
    (sp-cancel-autoskip-on-backward-movement nil)
    (sp-highlight-pair-overlay nil)
    (sp-highlight-wrap-overlay nil)
    (sp-highlight-wrap-tag-overlay nil)
    (sp-max-pair-length 4)
    (sp-max-prefix-length 25)
    (sp-navigate-consider-sgml-tags nil)
    (sp-navigate-skip-match nil)
    (sp-pair-overlay-keymap (make-sparse-keymap))
    (sp-show-pair-from-inside t)
    :init
    (use-package evil-smartparens
      :ghook 'smartparens-enabled-hook)
    :config
    (require 'smartparens-config)

    (let ((unless-list '(sp-point-before-word-p
                         sp-point-after-word-p
                         sp-point-before-same-p)))
      (sp-pair "'"  nil :unless unless-list)
      (sp-pair "\"" nil :unless unless-list))

    (dolist (brace '("(" "{" "["))
      (sp-pair brace nil
               :post-handlers '(("||\n[i]" "RET") ("| " "SPC"))
               :unless '(sp-point-before-word-p sp-point-before-same-p)))

    (sp-local-pair sp-lisp-modes "(" ")" :unless '(:rem sp-point-before-same-p))

    (sp-local-pair (append sp--html-modes '(markdown-mode gfm-mode))
                   "<!--" "-->"
                   :unless '(sp-point-before-word-p sp-point-before-same-p)
                   :actions '(insert) :post-handlers '(("| " "SPC"))))
#+end_src
** Syntax checking
#+begin_src emacs-lisp
  (use-package flymake
    :ghook 'prog-mode-hook 'text-mode-hook
    :general-config
    (+lang-def
      "D" '("Diagnostics" . consult-flymake))
    :custom
    (flymake-fringe-indicator-position 'right-fringe)
    :config
    (use-package flymake-popon
      :ghook 'flymake-mode-hook
      :custom
      (flymake-popon-posframe-border-width 0)))
#+end_src
** Tree-sitter
#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src
* Language-specific
** C
#+begin_src emacs-lisp
  (use-package c-ts-mode
    :ensure nil
    :gfhook ('(c-ts-mode-hook c++-ts-mode-hook) #'eglot-ensure)
    :custom
    (c-ts-mode-indent-offset 4)
    :config
    (use-package eglot-inactive-regions
      :ghook 'eglot-managed-mode-hook))

  (use-package cmake-ts-mode
    :ensure nil
    :mode "\\.cmake\\'" "CMakeLists.txt"
    :gfhook #'eglot-ensure
    :init
    (general-after 'eglot
      (add-to-list 'eglot-server-programs
                   '(cmake-ts-mode . ("neocmakelsp" "--stdio")))))

  (use-package meson-mode
    :gfhook #'eglot-ensure
    :init
    (general-after 'eglot
      (add-to-list 'eglot-server-programs
                   '(meson-mode . ("mesonlsp" "--lsp")))))
#+end_src
** Configuration
#+begin_src emacs-lisp
  (use-package conf-mode
    :ensure nil
    :gfhook #'(lambda () (run-hooks 'prog-mode-hook)))
#+end_src
** CSS
#+begin_src emacs-lisp
  (use-package css-mode
    :ensure nil
    :gfhook ('(css-mode-hook scss-mode-hook less-mode-hook) #'eglot-ensure)
    :init
    (general-after 'eglot
      (add-to-list 'eglot-server-programs
                   '((scss-mode less-mode sass-mode) . ,(eglot-alternatives
                                                         '(("vscode-css-language-server" "--stdio")
                                                           ("css-languageserver" "--stdio")))))))

  (use-package sass-mode
    :gfhook #'eglot-ensure)
#+end_src
** Dart
#+begin_src emacs-lisp
  (use-package dart-mode
    :ghook #'eglot-ensure
    :config
    (use-package flutter
      :general-config
      (+localleader-def
        :keymaps 'dart-mode-map
        "r" '("Run" . flutter-run)
        "q" '("Quit" . flutter-quit)
        "r" '("Hot reload" . flutter-hot-reload)
        "R" '("Hot restart" . flutter-hot-restart))))
#+end_src
** Emacs Lisp
#+begin_src emacs-lisp
  (use-package elisp-mode
    :ensure nil
    :general-config
    (+localleader-def
      :keymaps 'emacs-lisp-mode-map
      "e" '("Eval buffer" . eval-buffer))
    :config
    (use-package macrostep
      :general
      (+localleader-def
       :keymaps 'emacs-lisp-mode-map
                "m" '("Expand macro" . macrostep-expand)))
    (use-package elisp-demos
      :init
      (advice-add #'describe-function-1 :after #'elisp-demos-advice-describe-function-1)
      (advice-add #'helpful-update :after #'elisp-demos-advice-helpful-update))
    (use-package highlight-quoted
      :ghook 'emacs-lisp-mode-hook)
    (use-package highlight-defined
      :ghook 'emacs-lisp-mode-hook))
#+end_src
** Faust
#+begin_src emacs-lisp
  (use-package faustine
    :mode ("\\.dsp\\'" . faustine-mode)
    :general-config
    (+localleader-def
      :keymaps 'faustine-mode-map
      "c" '("Check syntax" . faustine-syntax-check)
      "d" '("Diagram" . faustine-diagram)
      "s" '("Source code" . faustine-source-code))
    :config
    (defvar ac-modes nil)
    (defvar ac-sources nil))
#+end_src
** GDScript
#+begin_src emacs-lisp
  (use-package gdscript-mode
    :gfhook #'eglot-ensure
    :general-config
    (+localleader-def
     :keymaps 'gdscript-mode-map
     "o" '("Open project in Godot" . gdscript-godot-open-project-in-editor)))
#+end_src
** Git
#+begin_src emacs-lisp
  (use-package git-modes)
#+end_src
** Go
#+begin_src emacs-lisp
  (use-package go-ts-mode
    :ensure nil
    :gfhook #'eglot-ensure)
#+end_src
** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :gfhook #'eglot-ensure
    :init
    (general-after 'projectile
      (add-to-list 'projectile-project-root-files "stack.yaml")))
#+end_src
** HTML
#+begin_src emacs-lisp
  (use-package web-mode
    :after smartparens
    :mode "\\.[px]?html?\\'"
    :mode "\\.\\(?:tpl\\|blade\\)\\(?:\\.php\\)?\\'"
    :mode "\\.erb\\'"
    :mode "\\.[lh]?eex\\'"
    :mode "\\.jsp\\'"
    :mode "\\.as[cp]x\\'"
    :mode "\\.ejs\\'"
    :mode "\\.hbs\\'"
    :mode "\\.mustache\\'"
    :mode "\\.svelte\\'"
    :mode "\\.twig\\'"
    :mode "\\.jinja2?\\'"
    :mode "\\.eco\\'"
    :mode "\\.njk\\'"
    :mode "wp-content/themes/.+/.+\\.php\\'"
    :mode "templates/.+\\.php\\'"
    :gfhook
    #'eglot-ensure
    #'(lambda ()
        (when (member web-mode-content-type '("javascript" "jsx"))
          (setq-local comment-start "//")
          (setq-local comment-end "")
          (setq-local comment-start-skip "// *")))
    :custom
    (web-mode-enable-html-entities-fontification t)
    (web-mode-auto-close-style 1)
    (web-mode-enable-auto-quoting nil)
    :init
    (general-after 'eglot
      (add-to-list 'eglot-server-programs
                   '(web-mode . ,(eglot-alternatives '(("vscode-html-language-server" "--stdio")
                                                       ("html-languageserver" "--stdio"))))))
    :config
    (sp-local-pair 'web-mode "<" ">" :unless '(:add (lambda (_id action _context)
                                                      (and (eq action 'insert)
                                                           (eq web-mode-auto-close-style 3)))))
    (setf (alist-get "javascript" web-mode-comment-formats nil nil #'equal)
          "//"))
#+end_src
** JavaScript
#+begin_src emacs-lisp
  (use-package js
    :ensure nil
    :gfhook ('js-ts-mode-hook #'eglot-ensure))

  (use-package typescript-ts-mode
    :ensure nil
    :gfhook #'eglot-ensure
    :custom
    (typescript-ts-mode-indent-offset 4))
#+end_src
** JSON
#+begin_src emacs-lisp
  (use-package json-ts-mode
    :ensure nil
    :gfhook #'eglot-ensure
    :custom
    (json-ts-mode-indent-offset 4))
#+end_src
** Julia
#+begin_src emacs-lisp
  (use-package julia-ts-mode
    :mode "\\.jl$")

  (use-package julia-snail
    :ghook 'julia-ts-mode-hook
    :general-config
    (+localleader-def
      :keymaps 'julia-snail-mode-map
      "'" '("Snail" . julia-snail)
      "a" '("Activate package" . julia-snail-package-activate)
      "d" '("Documentation at point" . julia-snail-doc-lookup)
      "r" '("Update module cache" . julia-snail-update-module-cache)
      "e" '("Eval" . nil)
      "eb" '("Buffer" . julia-snail-send-buffer-file)
      "el" '("Line" . julia-snail-send-line)
      "er" '("Region" . julia-snail-send-region))
    (+localleader-def
      :keymaps 'julia-snail-repl-mode-map
      "a" '("Activate package" . julia-snail-package-activate)
      "d" '("Documentation at point" . julia-snail-doc-lookup)
      "m" '("Go back" . julia-snail-repl-go-back)
      "r" '("Update module cache" . julia-snail-update-module-cache)))

  (use-package eglot-jl
    :after eglot
    :ghook ('julia-ts-mode-hook (list #'eglot-jl-init #'eglot-ensure)))
#+end_src
** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :gfhook #'eglot-ensure
    :custom
    (lua-indent-level 4))

  (use-package fennel-mode
    :mode "\\.fnl"
    :ghook ('lua-mode-hook #'antifennel-mode)
    :general-config
    (+localleader-def
      :keymaps 'fennel-mode-map
      "r" '("REPL" . fennel-repl)
      "c" '("Compile buffer" . fennel-view-compilation)
      "f" '("Format buffer" . fennel-format)
      "m" '("Expand macro" . fennel-macroexpand))
    :config
    (general-after 'apheleia
      (push '(fnlfmt . ("fnlfmt" "-"))
            apheleia-formatters)
      (push '(fennel-mode . fnlfmt)
            apheleia-mode-alist))
    (use-package flymake-fennel
      :ghook ('fennel-mode-hook #'flymake-fennel-setup)))
#+end_src
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :gfhook #'eglot-ensure
    :mode ("/README\\(?:\\.md\\)?\\'" . gfm-mode)
    :general-config
    (+localleader-def
      :keymaps 'markdown-mode-map
      "'" '("Edit block" . markdown-edit-code-block))
    :custom
    (markdown-enable-math t)
    (markdown-enable-wiki-links t)
    (markdown-italic-underscore t)
    (markdown-asymmetric-header t)
    (markdown-make-gfm-checkboxes-buttons t)
    (markdown-fontify-whole-heading-line t)
    :config
    (use-package grip-mode
      :general
      (+localleader-def
        :keymaps 'markdown-mode-map
        "p" '("Preview" . grip-mode))))
#+end_src
** Nim
#+begin_src emacs-lisp
  (use-package nim-mode
    :gfhook #'(lambda ()
                (setq-local tab-width 2)
                (eglot-ensure))
    :init
    (general-after 'eglot
      (add-to-list 'eglot-server-programs
                   '((nim-mode nimscript-mode) . ("nimlangserver"))))
    :config
    (general-after 'apheleia
      (push '(nimpretty . ("nimpretty" filepath))
            apheleia-formatters)
      (push '(nim-mode . nimpretty)
            apheleia-mode-alist)))
#+end_src
** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix"
    :gfhook #'eglot-ensure
    :general-config
    (+localleader-def
      :keymaps 'nix-mode-map
      "r" '("REPL" . nix-repl-show))
    :custom
    (nix-indent-offest 2)
    :init
    (+eglot-config! :nil '(:formatting (:command ["alejandra"]))))
#+end_src
** Org
#+begin_src emacs-lisp
  (use-package org
    :general-config
    (:keymaps 'org-src-mode-map
              [remap evil-save] 'org-edit-src-save)
    (+localleader-def
      :keymaps 'org-mode-map
      [remap origami-toggle-all-nodes] 'org-shifttab
      "s" '("Sort" . org-sort)
      "g" '("Goto" . consult-org-heading)
      "'" '("Edit block" . org-edit-special)
      "t" '("TODO" . org-todo)
      "x" '("Checkbox" . org-toggle-checkbox)
      "e" '(:ignore t :wk "+export")
      "eh" '("HTML" . org-html-export-to-html)
      "eo" '("ODT" . org-odt-export-to-odt))
    :custom
    (org-cycle-emulate-tab nil)
    (org-eldoc-breadcrumb-separator (concat " " (nerd-icons-mdicon "nf-md-chevron_right") " "))
    (org-enforce-todo-dependencies t)
    (org-export-with-author nil)
    (org-export-with-smart-quotes t)
    (org-export-with-todo-keywords nil)
    (org-fontify-done-headline t)
    (org-fontify-quote-and-verse-blocks t)
    (org-fontify-whole-leading-line t)
    (org-hide-leading-stars t)
    (org-image-actual-width nil)
    (org-indirect-buffer-display 'current-window)
    (org-modules '())
    (org-startup-folded 'overview)
    (org-startup-indented t)
    (org-tags-column 0)
    :config
    (plist-put org-format-latex-options :scale 1.5)
    (add-to-list 'org-file-apps '(directory . emacs))
    (add-to-list 'org-file-apps '(remote . emacs))
    (use-package evil-org
      :ghook 'org-mode-hook)
    (use-package org-contrib)
    (use-package org-cliplink)
    (use-package org-download)
    (use-package org-appear)
    (use-package org-superstar)
    (use-package ob-async)
    (use-package ox-pandoc
      :general
      (+localleader-def
        :keymaps 'org-mode-map
        "ed" '("DOCX" . org-pandoc-export-to-docx)))
    (use-package org-variable-pitch
      :ghook ('org-mode-hook #'org-variable-pitch-minor-mode)
      :custom
      (org-variable-pitch-fontify-headline-prefix t)
      :config
      (set-face-attribute 'org-variable-pitch-fixed-face nil
                          :family mono-font
                          :height 110)
      (general-setq org-variable-pitch-fixed-faces (append org-variable-pitch-fixed-faces
                                                           '(line-number
                                                             line-number-current-line
                                                             corfu-default
                                                             highlight-indent-guides-character-face
                                                             org-modern-block-name
                                                             org-modern-date-active
                                                             org-modern-date-inactive
                                                             org-modern-done
                                                             org-modern-horizontal-rule
                                                             org-modern-internal-target
                                                             org-modern-label
                                                             org-modern-priority
                                                             org-modern-radio-target
                                                             org-modern-statistics
                                                             org-modern-symbol
                                                             org-modern-tag
                                                             org-modern-time-active
                                                             org-modern-time-inactive
                                                             org-modern-todo))))
    (use-package org-modern
      :ghook 'org-mode-hook
      :custom
      (org-modern-block-name `(,(concat (nerd-icons-mdicon "nf-md-chevron_double_right") " ") . ,(concat (nerd-icons-mdicon "nf-md-chevron_double_left") " ")))
      (org-modern-keyword (concat (nerd-icons-mdicon "nf-md-wrench") " "))
      (org-modern-star '("✯" "✵" "✺" "✼" "❁" "❃" "❆")))
    (use-package org-appear
      :ghook ('org-mode-hook #'(lambda ()
                                 (general-add-hook 'evil-insert-state-entry-hook
                                                   #'org-appear-manual-start
                                                   nil
                                                   t)
                                 (general-add-hook 'evil-insert-state-exit-hook
                                                   #'org-appear-manual-stop
                                                   nil
                                                   t)))
      :custom
      (org-appear-trigger 'manual))
    (use-package org-fragtog
      :ghook 'org-mode-hook))
#+end_src
** Python
#+begin_src emacs-lisp
  (use-package python
    :ensure nil
    :gfhook #'eglot-ensure
    :custom
    (python-indent-guess-indent-offset-verbose nil)
    :init
    (+eglot-config! :pylsp '(:plugins (
                                       :ruff (:enabled t)
                                       :autopep8 (:enabled :json-false)
                                       :flake8 (:enabled :json-false)
                                       :mccabe (:enabled :json-false)
                                       :pycodestyle (:enabled :json-false)
                                       :pydocstyle (:enabled :json-false)
                                       :yapf (:enabled :json-false))))
  
    :config
    (when (and (executable-find "python3")
               (string= python-shell-interpreter "python"))
      (general-setq python-shell-interpreter "python3")))
#+end_src
** QML
#+begin_src emacs-lisp
  (use-package qml-mode
    :mode "\\.qml$")
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rust-ts-mode
    :ensure nil
    :gfhook #'eglot-ensure)
#+end_src
** Shell
#+begin_src emacs-lisp
  (use-package sh-script
    :ensure nil
    :gfhook ('bash-ts-mode-hook #'eglot-ensure))

  (use-package fish-mode)
#+end_src
** YAML
#+begin_src emacs-lisp
  ;; TODO: schema picker keybinding
  (use-package yaml-ts-mode
    :mode ".clangd\\'"
    :mode ".clang-format\\'"
    :ensure nil
    :gfhook #'eglot-ensure
    :config
    (use-package eglot-yaml
      :general
      (+localleader-def
        :keymaps 'yaml-ts-mode-map
        "s" '("Select schema" . eglot-yaml-schema-for-buffer))))
#+end_src
** Yuck
#+begin_src emacs-lisp
  (use-package yuck-mode)
#+end_src
** Zig
#+begin_src emacs-lisp
  (use-package zig-mode
    :gfhook #'eglot-ensure
    :custom
    (zig-format-on-save nil))
#+end_src

