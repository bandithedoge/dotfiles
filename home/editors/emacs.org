#+property: header-args :tangle "init.el"

* Initial optimization
#+begin_src emacs-lisp :tangle "early-init.el"
  ;; TODO: fix occasional hangups and random crashes
  (setenv "LSP_USE_PLISTS" "true")

  (setq auto-mode-case-fold nil
        bidi-inhibit-bpa t
        custom-file (make-temp-file "custom-" nil ".el")
        fast-but-imprecise-scrolling t
        frame-inhibit-implied-resize t
        frame-resize-pixelwise t
        highlight-nonselected-windows nil
        idle-update-delay 1.0
        inhibit-compacting-font-caches t
        inhibit-startup-echo-area-message user-login-name
        inhibit-startup-screen t
        initial-major-mode 'fundamental-mode
        initial-scratch-message nil
        pgtk-wait-for-event-timeout 0.001
        redisplay-skip-fontification-on-input t)

  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right
                cursor-in-non-selected-windows nil
                mode-line-format nil)

  (advice-add #'display-startup-echo-area-message :override #'ignore)
  (advice-add #'display-startup-screen :override #'ignore)

  (define-advice load-file (:override (file) silence)
    (load file nil 'nomessage))

  (define-advice startup--load-user-init-file (:before (&rest _) undo-silence)
    (advice-remove #'load-file #'load-file@silence))

  (put 'mode-line-format 'initial-value (default-toplevel-value 'mode-line-format))
  (dolist (buf (buffer-list))
    (with-current-buffer buf (setq mode-line-format nil)))

  (push '(fullscreen . maximized) initial-frame-alist)

  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (setq menu-bar-mode nil
        tool-bar-mode nil
        scroll-bar-mode nil)

  (provide 'early-init)
#+end_src
* Package setup
#+begin_src emacs-lisp
  (with-eval-after-load 'package
    (setq package-archives '(("gnu" . "https://elpa.gnu.org/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                             ("melpa" . "https://melpa.org/packages/"))))

  ;; TODO: move to leaf?
  (require 'use-package)
  (setq use-package-always-defer t)
#+end_src
* Emacs
#+begin_src emacs-lisp
  (use-package emacs
    :init
    (set-face-attribute 'default nil
                        :family mono-font
                        :height 110)
    (set-face-attribute 'variable-pitch nil
                        :family ui-font
                        :height 130)
    (global-visual-line-mode)
    :custom
    (ad-redefinition-action 'accept)
    (auto-save-default t)
    (auto-save-include-big-deletions t)
    (auto-window-vscroll nil)
    (backup-by-copying t)
    (confirm-nonexistent-file-or-buffer nil)
    (create-lockfiles nil)
    (debug-on-error init-file-debug)
    (delete-old-versions t)
    (echo-keystrokes 0.02)
    (enable-recursive-minibuffers t)
    (find-file-suppress-same-file-warnings t)
    (find-file-visit-truename t)
    (frame-resize-pixelwise t)
    (frame-title-format '("%b - Emacs"))
    (hscroll-margin 2)
    (hscroll-step 1)
    (icon-title-format frame-title-format)
    (indicate-buffer-boundaries nil)
    (indicate-empty-lines nil)
    (jka-compr-verbose init-file-debug)
    (kill-do-not-save-duplicates t)
    (make-backup-files nil)
    (minibuffer-prompt-properties '(read-only t intangible t cursor-intangible t face minibuffer-prompt))
    (mouse-wheel-scroll-amount '(2 ((shift) . hscroll)))
    (mouse-wheel-scroll-amount-horizontal 2)
    (mouse-yank-at-point t)
    (require-final-newline t)
    (resize-mini-windows 'grow-only)
    (scroll-conservatively 10)
    (scroll-margin 0)
    (scroll-preserve-screen-position t)
    (sentence-end-double-space nil)
    (split-height-threshold nil)
    (split-width-threshold 160)
    (truncate-partial-width-windows nil)
    (use-dialog-box nil)
    (use-short-answers t)
    (version-control t)
    (warning-suppress-types '((defvaralias)))
    (window-resize-pixelwise nil)
    :config
    (setq-default fill-column 80
                  tab-always-indent nil
                  tab-width 4
                  truncate-lines t
                  word-wrap t)
    (tooltip-mode -1)
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))

  (use-package savehist
    :custom
    (savehist-save-minibuffer-history t)
    (savehist-autosave-interval nil)
    (savehist-additional-variables '(kill-ring register-alist mark-ring global-mark-ring search-ring regexp-search-ring))
    :config
    (savehist-mode))

  (setq display-line-numbers-type 'relative
        display-line-numbers-width 3
        display-line-numbers-grow-only t)
  (add-hook 'prog-mode-hook #'display-line-numbers-mode)
  (add-hook 'text-mode-hook #'display-line-numbers-mode)

  (use-package hl-line
    :config
    (global-hl-line-mode))

  (use-package paren
    :custom
    (show-paren-delay 0.1)
    (show-paren-highlight-openparen t)
    (show-paren-when-point-in-periphery t)
    (show-paren-when-point-inside-paren t))

  (use-package better-defaults)

  (use-package esup)
#+end_src
* Theme
#+begin_src emacs-lisp :tangle "doom-rice-theme.el"
  ;; TODO: evil-ex prompt
  (require 'doom-themes)

  (def-doom-theme doom-rice
                  "Customized theme."
                  ((bg `(,base00))
                   (bg-alt `(,base10))
                   (fg `(,base05))
                   (fg-alt `(,base04))
                   (accent `(,base0F))

                   (base0 `(,base11))
                   (base1 `(,base10))
                   (base2 `(,base00))
                   (base3 `(,base01))
                   (base4 `(,base02))
                   (base5 `(,base07))
                   (base6 `(,base04))
                   (base7 `(,base05))
                   (base8 `(,base06))

                   (grey `(,base03))
                   (red `(,base08))
                   (orange `(,base09))
                   (yellow `(,base0A))
                   (green `(,base0B))
                   (cyan `(,base0C))
                   (blue `(,base0D))
                   (magenta `(,base0E))

                   (violet `(,base17))
                   (dark-blue (doom-darken blue 0.2))
                   (teal `(,base14))
                   (dark-cyan (doom-darken cyan 0.2))

                   (highlight accent)
                   (vertical-bar base0)
                   (selection base4)
                   (builtin red)
                   (comments grey)
                   (doc-comments accent)
                   (constants orange)
                   (functions blue)
                   (keywords magenta)
                   (methods blue)
                   (operators fg)
                   (type yellow)
                   (strings green)
                   (variables base8)
                   (numbers orange)
                   (region base4)
                   (error red)
                   (warning yellow)
                   (success green)
                   (vc-modified magenta)
                   (vc-added green)
                   (vc-deleted red)

                   (modeline-fg)
                   (modeline-fg-alt grey)
                   (modeline-bg base4)
                   (modeline-bg-alt bg-alt))
                  (((line-number &override) :foreground grey :slant 'normal)
                   ((line-number-current-line &override) :foreground accent :weight 'bold :slant 'normal)
                   (vertico-current :background bg)
                   (flymake-popon :background base4)
                   (highlight-indent-guides-character-face :foreground base3)
                   (prescient-primary-highlight :foreground accent :weight 'bold)
                   (prescient-secondary-highlight :foreground accent)
                   (origami-fold-header-face :background base4 :foreground grey)
                   (lsp-ui-doc-background :background base4)
                   (lsp-ui-doc-header :background accent :foreground bg)))
#+end_src

#+begin_src emacs-lisp
  (use-package nerd-icons
    :custom
    (nerd-icons-font-family "Symbols Nerd Font"))

  (use-package doom-themes
    :config
    (use-package all-the-icons)
    (load-theme 'doom-rice t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config)
    (use-package solaire-mode
      :config
      (push '(treemacs-window-background-face . solaire-default-face) solaire-mode-remap-alist)
      (push '(treemacs-hl-line-face . solaire-hl-line-face) solaire-mode-remap-alist)
      (solaire-global-mode +1)))
#+end_src
* Evil
#+begin_src emacs-lisp
  (use-package evil
    :demand t
    :init
    (setq evil-want-keybinding nil)
    (use-package undo-fu)
    (use-package goto-chg)
    :bind*
    ("<leader>w" ("Kill buffer" . kill-this-buffer))
    ("<leader>W" ("Close window" . evil-window-delete))
    :custom
    (evil-echo-state nil)
    (evil-ex-interactive-search-highlight 'selected-window)
    (evil-ex-search-vim-style-regexp t)
    (evil-ex-visual-char-range t)
    (evil-kbd-macro-suppress-motion-error t)
    (evil-mode-line-format 'nil)
    (evil-symbol-word-search t)
    (evil-undo-system 'undo-fu)
    (evil-visual-state-cursor 'hollow)
    (evil-want-C-g-bindings t)
    (evil-want-C-u-scroll t)
    (evil-want-Y-yank-to-eol t)
    :config
    (evil-mode 1)
    (evil-set-leader 'motion (kbd "SPC"))
    (evil-set-leader 'motion (kbd "<backspace>") t)
    (use-package evil-better-visual-line
      :config
      (evil-better-visual-line-on))
    (use-package evil-collection
      :custom
      (evil-collection-key-blacklist '("SPC" "<backspace>"))
      :config
      (evil-collection-init))
    (use-package evil-goggles
      :config
      (evil-goggles-mode)
      (evil-goggles-use-diff-faces)))

  (use-package evil-nerd-commenter
    :commands (evilnc-comment-operator evilnc-inner-comment evilnc-outer-commenter)
    :bind (:map evil-motion-state-map
                ("gc" . evilnc-comment-operator)))

  (use-package evil-traces
    :after evil-ex
    :config
    (evil-traces-mode))

  (use-package evil-visualstar
    :commands (evil-visualstar/begin-search evil-visualstar/begin-search-forward evil-visualstar/begin-search-backward)
    :bind (:map evil-visual-state-map
                ("*" . evil-visualstar/begin-search-forward)
                ("#" . evil-visualstar/begin-search-backward)))
#+end_src
* Utilities
** Direnv
#+begin_src emacs-lisp
  (use-package envrc
    :config
    (envrc-global-mode))
#+end_src
** EditorConfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :config
    (editorconfig-mode 1)
    (use-package editorconfig-generate))
#+end_src
** Git
#+begin_src emacs-lisp
  (use-package vc
    :custom
    (vc-git-diff-switches '("--histogram"))
    (vc-follow-symlinks t))

  ;; TODO: gracefully kill buffers on exit
  (use-package magit
    :bind* ("<leader>g" ("Git" . magit))
    :bind
    (:map transient-map
          ([escape] . transient-quit-one))
    (:map magit-mode-map
          ("SPC" . nil))
    :hook (magin-process-mode . goto-address-mode)
    :custom
    (magit-diff-refine-hunk t)
    (magit-save-repository-buffers nil)
    (magit-revision-insert-related-refs nil)
    (transient-display-buffer-action '(display-buffer-below-selected))
    (transient-default-level 5)
    (magit-bury-buffer-function #'magit-mode-quit-window)
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
    :config
    (use-package magit-todos
      :bind* (:map magit-todos-item-section-map
                   ("k" . evil-previous-line))
      :hook (magit-mode . magit-todos-mode)
      :custom
      (magit-todos-keyword-suffix "\\(?:([^)]+)\\)?:?")))
#+end_src
** PDF
#+begin_src emacs-lisp
  (use-package pdf-tools
    :mode ("\\.pdf\\'" . pdf-view-mode)
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install-noverify))
#+end_src
** Project management
#+begin_src emacs-lisp
  (use-package projectile
    :custom
    (projectile-auto-discover nil)
    (projectile-globally-ignored-directories '("^\\.direnv$" "^\\result*$"))
    (projectile-globally-ignored-file-suffixes '(".elc" ".pyc" ".o"))
    (projectile-globally-ignored-files '(".DS_Store" "TAGS"))
    (projectile-ignored-projects '("~/"))
    :config
    (projectile-mode 1))
#+end_src
** Snippets
#+begin_src emacs-lisp
  (use-package tempel
    :hook ((prog-mode text-mode lsp-completion-mode) . (lambda ()
                                                         (setq-local completion-at-point-functions
                                                                     (cons #'tempel-complete
                                                                           completion-at-point-functions))))
    :config
    (use-package tempel-collection))
#+end_src
** Terminal emulator
#+begin_src emacs-lisp
  (use-package vterm
    :bind*
    ("<leader>T" ("Terminal" . vterm))
    :custom
    (vterm-kill-buffer-on-exit t))
#+end_src
* Completion
** At point
#+begin_src emacs-lisp
  ;; TODO: fix graphical glitching, elisp completions in other modes, weird manual completion behavior
  (use-package corfu
    :hook ((prog-mode text-mode) . corfu-mode)
    :after evil
    :bind (:map corfu-popupinfo-map
                ("C-h" . corfu-popupinfo-scroll-up)
                ("C-l" . corfu-popupinfo-scroll-down))
    :bind (:map evil-insert-state-map
                ("C-SPC" . completion-at-point))
    :custom
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-count 10)
    (corfu-cycle t)
    (corfu-left-margin-width 1)
    (corfu-margin-formatters '(nerd-icons-corfu-formatter))
    (corfu-on-exact-match 'show)
    (corfu-popupinfo-delay '(0.5 . 0.25))
    (corfu-popupinfo-max-height 20)
    (corfu-preselect 'prompt)
    (corfu-preview-current nil)
    (corfu-quit-at-boundary t)
    (corfu-quit-no-match t)
    (corfu-right-margin-width 1)
    :config
    (use-package corfu-prescient
      :config
      (corfu-prescient-mode))
    (corfu-popupinfo-mode)
    (use-package nerd-icons-corfu))

  (use-package cape
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-symbol))
#+end_src
** Minibuffer
#+begin_src emacs-lisp
  ;; TODO: find-file
  (use-package vertico
    :bind
    (:map vertico-map
          ("C-j" . vertico-next)
          ("C-M-j" . vertico-next-group)
          ("C-k" . vertico-previous)
          ("C-M-j" . vertico-next-group)
          ("C-u" . vertico-scroll-down)
          ("C-d" . vertico-scroll-up)
          ("RET" . vertico-directory-enter)
          ("DEL" . vertico-directory-delete-char))
    :custom
    (vertico-count 17)
    (vertico-cycle t)
    (completion-in-region-function (lambda (&rest args)
                                     (apply (if vertico-mode
                                                #'consult-completion-in-region
                                              #'completion--in-region)
                                            args)))
    :init
    (vertico-mode)
    (vertico-mouse-mode)
    :config
    (use-package vertico-prescient
      :config
      (vertico-prescient-mode))
    (use-package marginalia
      :bind (:map minibuffer-local-map
                  ("C-h" . marginalia-cycle))
      :init
      (marginalia-mode))
    (use-package nerd-icons-completion
      :hook (marginalia-mode . nerd-icons-completion-marginalia-setup)
      :config
      (nerd-icons-completion-mode)))

  (use-package consult
    :bind*
    ("<leader>SPC" ("Execute command" . execute-extended-command))
    ("<leader>b" ("Switch buffer" . consult-buffer))
    ("<leader>f" ("Find file" . find-file)))

  (use-package consult-dir
    :bind ([remap list-directory] . consult-dir))
#+end_src
** Style
#+begin_src emacs-lisp
  (use-package prescient
    :config
    (prescient-persist-mode)
    :custom
    (prescient-sort-full-matches-first t))
#+end_src
* UI
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :after solaire-mode
    :custom
    (dashboard-center-content t)
    (dashboard-icon-type 'nerd-icons)
    (dashboard-items '((projects . 5)
                       (recents . 10)))
    (dashboard-path-style 'truncate-beginning)
    (dashboard-startup-banner 'logo)
    :config
    (dashboard-setup-startup-hook))
#+end_src
** File tree
#+begin_src emacs-lisp
  ;; TODO: missing icons, prettier indent guides
  (use-package treemacs
    :after doom-themes
    :bind* ("<leader>t" ("File tree" . treemacs))
    :bind (:map evil-treemacs-state-map
                ("o v" . treemacs-visit-node-horizontal-split)
                ("o s" . treemacs-visit-node-vertical-split))
    :custom
    (treemacs-eldoc-display 'detailed)
    (treemacs-follow-after-init t)
    (treemacs-fringe-indicator-mode nil)
    (treemacs-indent-guide-mode t)
    (treemacs-no-png-images t)
    :custom-face
    (treemacs-directory-face ((t :inherit (variable-pitch))))
    :config
    (treemacs-follow-mode -1)
    (treemacs-git-mode 'deferred)
    (use-package treemacs-nerd-icons)
    (use-package treemacs-evil
      :after evil)
    (use-package treemacs-projectile
      :after projectile)
    (use-package lsp-treemacs
      :after lsp-mode
      :config
      (lsp-treemacs-sync-mode 1))
    (use-package treemacs-magit
      :after magit)
    (doom-themes-treemacs-config)
    (treemacs-load-theme "nerd-icons"))
#+end_src
** Folding
#+begin_src emacs-lisp
  (use-package origami
    :after evil
    :hook ((prog-mode text-mode) . (lambda ()
                                     (setq-local origami-fold-style 'triple-braces)
                                     (origami-mode)
                                     (origami-close-all-nodes (current-buffer))))
    :bind (:map evil-motion-state-map
                ("TAB" . evil-toggle-fold)
                ("<backtab>" . origami-toggle-all-nodes)
                ([remap evil-toggle-fold] . origami-recursively-toggle-node)
                ([remap evil-open-fold] . origami-open-node)
                ([remap evil-open-folds] . origami-open-all-nodes)
                ([remap evil-close-fold] . origami-close-node)
                ([remap evil-close-folds] . origami-close-all-nodes)
                ([remap evil-open-fold-rec] . origami-open-node-recursively))
    :custom
    (origami-show-fold-header t)
    (origami-fold-replacement (nerd-icons-mdicon "nf-md-dots_horizontal")))
#+end_src
** Git
#+begin_src emacs-lisp
  ;; TODO: ugly visuals
  (use-package diff-hl
    :hook
    (find-file . diff-hl-mode)
    (diff-hl-mode . diff-hl-margin-mode)
    (magit-pre-refresh . diff-hl-magit-pre-refresh)
    (magit-post-refresh . diff-hl-magit-post-refresh)
    :custom
    (diff-hl-flydiff-delay 0.5)
    (diff-hl-show-staged-changes nil))
#+end_src
** Help buffer
#+begin_src emacs-lisp
  (use-package helpful
    :bind*
    (:prefix "<leader>h"
             :prefix-map +help
             ("C" ("Command" . helpful-command))
             ("F" ("Face" . describe-face))
             ("M" ("Manpage" . woman))
             ("P" ("Package" . describe-package))
             ("c" ("Callable" . helpful-callable))
             ("g" ("Customize group" . customize-group))
             ("k" ("Key" . helpful-key))
             ("m" ("Manual" . info-display-manual))
             ("p" ("Thing at point" . helpful-at-point))
             ("v" ("Variable" . helpful-variable))))
#+end_src
** Indent guides
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :hook
    (prog-mode . highlight-indent-guides-mode)
    (org-mode-local-vars . (lambda ()
                             (and highlight-indent-guides-mode
                                  (bound-and-true-p org-indent-mode)
                                  (highlight-indent-guides-mode -1))))
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-auto-enabled nil))
#+end_src
** Info
#+begin_src emacs-lisp
  (use-package info-colors
    :hook (Info-selection . info-colors-fontify-mode))
#+end_src
** Keybindings
#+begin_src emacs-lisp
  (use-package which-key
    :custom
    (which-key-add-column-padding 1)
    (which-key-idle-delay 0.3)
    (which-key-max-display-columns nil)
    (which-key-min-display-lines 6)
    (which-key-prefix-prefix nil)
    (which-key-side-window-slot -10)
    (which-key-sort-order #'which-key-key-order-alpha)
    (which-key-sort-uppercase-first nil)
    :config
    (which-key-setup-side-window-bottom)
    (which-key-mode))
#+end_src
** Ligatures
#+begin_src emacs-lisp
  (use-package ligature
    :config
    (ligature-set-ligatures t '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "///" "/=" "/=="
                                "/>" "//" "/*" "*>" "***" "*/" "<-" "<<-" "<=>" "<=" "<|" "<||"
                                "<|||" "<|>" "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>" "<-|"
                                "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*"
                                "<*>" "<->" "<!--" ":>" ":<" ":::" "::" ":?" ":?>" ":=" "::=" "=>>"
                                "==>" "=/=" "=!=" "=>" "===" "=:=" "==" "!==" "!!" "!=" ">]" ">:"
                                ">>-" ">>=" ">=>" ">>>" ">-" ">=" "&&&" "&&" "|||>" "||>" "|>" "|]"
                                "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||" ".." ".?" ".=" ".-" "..<"
                                "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|" "??" "?." "?=" "?:" "##"
                                "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" ";;" "_|_"
                                "__" "~~" "~~>" "~>" "~-" "~@" "$>" "^=" "]#"))
    (global-ligature-mode t))
#+end_src
** Modeline
#+begin_src emacs-lisp
  ;; TODO: less confusing background colors
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    (doom-modeline-buffer-encoding 'nondefault)
    (doom-modeline-enable-word-count t)
    (doom-modeline-height 30)
    (doom-modeline-indent-info t)
    (doom-modeline-irc nil)
    (doom-modeline-time nil)
    :config
    (use-package anzu
      :config
      (global-anzu-mode +1)
      (use-package evil-anzu
        :after evil
        :config
        (global-anzu-mode +1))))

  ;; TODO: more modes
  (use-package hide-mode-line
    :hook ((completion-list-mode Man-mode) . hide-mode-line-mode))
#+end_src
** Rainbow delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    :custom
    (rainbow-delimiters-max-face-count 4))
#+end_src
** TODOs
#+begin_src emacs-lisp
  (use-package hl-todo
    :hook (prog-mode . hl-todo-mode)
    :custom
    (hl-todo-highlight-punctuation ":")
    (hl-todo-keyword-faces '(("TODO" warning bold)
                             ("FIXME" error bold)
                             ("REVIEW" font-lock-keyword-face bold)
                             ("HACK" font-lock-constant-face bold)
                             ("DEPRECATED" font-lock-doc-face bold)
                             ("NOTE" success bold)
                             ("BUG" error bold)
                             ("XXX" font-lock-constant-face bold))))
#+end_src
** Window switcher
#+begin_src emacs-lisp
  (use-package ace-window
    :bind
    ([remap other-window] . ace-window)
    ([remap evil-window-next] . ace-window)
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-scope 'frame))
#+end_src
* Editing
** LSP
#+begin_src emacs-lisp
  ;; TODO: better code action suggestions
  ;;;###autoload
  (defun lsp-booster--advice-json-parse (old-fn &rest args)
    "Try to parse bytecode instead of json."
    (or
     (when (equal (following-char) ?#)
       (let ((bytecode (read (current-buffer))))
         (when (byte-code-function-p bytecode)
           (funcall bytecode))))
     (apply old-fn args)))
  (defun lsp-booster--advice-final-command (old-fn cmd &optional test?)
    "Prepend emacs-lsp-booster command to lsp CMD."
    (let ((orig-result (funcall old-fn cmd test?)))
      (if (and (not test?)                             ;; for check lsp-server-present?
               (not (file-remote-p default-directory)) ;; see lsp-resolve-final-command, it would add extra shell wrapper
               lsp-use-plists
               (not (functionp 'json-rpc-connection))  ;; native json-rpc
               (executable-find "emacs-lsp-booster"))
          (progn
            (message "Using emacs-lsp-booster for %s!" orig-result)
            (cons "emacs-lsp-booster" orig-result))
        orig-result)))

  (defun +format (&optional arg)
    (interactive "P")
    (call-interactively
     (if (and (bound-and-true-p lsp-mode)
              (lsp-feature? "textDocument/formatting"))
         #'lsp-format-buffer
       #'apheleia-format-buffer)))

  (use-package apheleia
    :bind* (:prefix "<localleader>l"
                    :prefix-map +lang
                    ("f" ("Format" . +format))))

  (use-package lsp-mode
    :after tempel
    :bind
    (:map lsp-mode-map
          :prefix "<localleader>ls"
          :prefix-map +server
          ("q" ("Shutdown" . lsp-workspace-shutdown))
          ("r" ("Restart" . lsp-workspace-restart)))
    (:map lsp-mode-map
          ("<localleader>lr" ("Rename" . lsp-rename))
          ("<localleader>la" ("Code action" . lsp-execute-code-action)))
    :custom
    (lsp-auto-execute-action nil)
    (lsp-completion-provider :none)
    (lsp-diagnostics-provider :flymake)
    (lsp-eldoc-enable-hover nil)
    (lsp-enable-folding nil)
    (lsp-enable-on-type-formatting nil)
    (lsp-enable-semantic-highlighting t)
    (lsp-enable-suggest-server-download nil)
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-inlay-hint-enable t)
    (lsp-keep-workspace-alive nil)
    (lsp-pwsh-folding-enable nil)
    :custom-face
    (lsp-inlay-hint-face ((t (:height 0.8 :inherit 'font-lock-comment-face))))
    :init
    (advice-add (if (progn (require 'json)
                           (fboundp 'json-parse-buffer))
                    'json-parse-buffer
                  'json-read)
                :around
                #'lsp-booster--advice-json-parse)
    (advice-add 'lsp-resolve-final-command :around #'lsp-booster--advice-final-command)
    (setq-default read-process-output-max (* 1024 1024))
    :config
    ;; TODO: better hover doc
    (use-package lsp-ui
      :bind
      (:map evil-motion-state-map
            ("K" . lsp-ui-doc-glance))
      (:map lsp-ui-peek-mode-map
            ("h" . lsp-ui-peek--select-prev-file)
            ("j" . lsp-ui-peek--select-next)
            ("k" . lsp-ui-peek--select-prev)
            ("l" . lsp-ui-peek--select-next-file))
      :custom
      (lsp-ui-delay 0.5)
      (lsp-ui-doc-max-height 8)
      (lsp-ui-doc-max-width 72)
      (lsp-ui-doc-position 'at-point)
      (lsp-ui-doc-show-with-mouse nil))
    (use-package consult-lsp
      :bind (:map lsp-mode-map
                  ([remap xref-find-apropos] . consult-lsp-symbols))))

  (use-package lsp-ltex
    :after lsp-mode
    :custom
    (lsp-ltex-completion-enabled t)
    (lsp-ltex-mother-tongue "pl-PL"))
#+end_src
** Parinfer
#+begin_src emacs-lisp
  (use-package parinfer-rust-mode
    :hook ((emacs-lisp-mode lisp-mode fennel-mode) . parinfer-rust-mode)
    :custom
    (parinfer-rust-auto-download t)
    (parinfer-rust-troublesome-modes 'nil))
#+end_src
** Smart parentheses
#+begin_src emacs-lisp
  (use-package smartparens
    :hook ((prog-mode text-mode) . smartparens-mode)
    :custom
    (sp-cancel-autoskip-on-backward-movement nil)
    (sp-highlight-pair-overlay nil)
    (sp-highlight-wrap-overlay nil)
    (sp-highlight-wrap-tag-overlay nil)
    (sp-max-pair-length 4)
    (sp-max-prefix-length 25)
    (sp-navigate-consider-sgml-tags nil)
    (sp-navigate-skip-match nil)
    (sp-pair-overlay-keymap (make-sparse-keymap))
    (sp-show-pair-from-inside t)
    :init
    (use-package evil-smartparens
      :hook smartparens-enabled-hook)
    :config
    (require 'smartparens-config)

    (let ((unless-list '(sp-point-before-word-p
                         sp-point-after-word-p
                         sp-point-before-same-p)))
      (sp-pair "'"  nil :unless unless-list)
      (sp-pair "\"" nil :unless unless-list))

    (dolist (brace '("(" "{" "["))
      (sp-pair brace nil
               :post-handlers '(("||\n[i]" "RET") ("| " "SPC"))
               :unless '(sp-point-before-word-p sp-point-before-same-p)))

    (sp-local-pair sp-lisp-modes "(" ")" :unless '(:rem sp-point-before-same-p))

    (sp-local-pair (append sp--html-modes '(markdown-mode gfm-mode))
                   "<!--" "-->"
                   :unless '(sp-point-before-word-p sp-point-before-same-p)
                   :actions '(insert) :post-handlers '(("| " "SPC"))))
#+end_src
** Syntax checking
#+begin_src emacs-lisp
  (use-package flymake
    :hook ((prog-mode text-mode) . flymake-mode)
    :bind* ("<localleader>ld" ("Diagnostics" . consult-flymake))
    :config
    (use-package flymake-popon
      :hook (flymake-mode . flymake-popon-mode)
      :custom
      (flymake-popon-posframe-border-width 0)))
#+end_src
** Tree-sitter
#+begin_src emacs-lisp
  (use-package treesit-auto
    :config
    (treesit-auto-add-to-auto-mode-alist 'all)
    (global-treesit-auto-mode))
#+end_src
* Language-specific
** C
#+begin_src emacs-lisp
  (use-package c-ts-mode
    :hook ((c-ts-mode c++-ts-mode) . lsp-deferred)
    :custom
    (c-ts-mode-indent-offset 4))

  (use-package cmake-ts-mode
    :mode "\\.cmake\\'"
    :mode "CMakeLists.txt")

  (use-package meson-mode
    :hook (meson-mode . (lambda ()
                          (add-to-list 'completion-at-point-functions #'meson-completion-at-point-function))))
#+end_src
** Configuration
#+begin_src emacs-lisp
  (use-package conf-mode
    :hook (conf-mode . (lambda () (run-hooks 'prog-mode-hook))))
#+end_src
** CSS
#+begin_src emacs-lisp
  (use-package css-mode
    :hook ((css-mode scss-mode less-mode) . lsp-deferred))

  (use-package sass-mode
    :hook (sass-mode . lsp-deferred))
#+end_src
** Dart
#+begin_src emacs-lisp
  (use-package dart-mode
    :after lsp-mode
    :config
    (use-package flutter
      :bind* (:map dart-mode-map
                   ("<localleader>r" ("Run" . flutter-run))
                   ("<localleader>q" ("Quit" . flutter-quit))
                   ("<localleader>r" ("Hot reload" . flutter-hot-reload))
                   ("<localleader>R" ("Hot restart" . flutter-hot-restart)))))

  (use-package lsp-dart
    :hook (dart-mode . lsp-deferred))
#+end_src
** Emacs Lisp
#+begin_src emacs-lisp
  (use-package elisp-mode
    :bind* (:map emacs-lisp-mode-map
                 ("<localleader>e" ("Eval buffer" . eval-buffer)))
    :config
    (use-package macrostep
      :bind* (:map emacs-lisp-mode-map
                   ("<localleader>m" ("Expand macro" . macrostep-expand))))
    (use-package elisp-demos
      :init
      (advice-add #'describe-function-1 :after #'elisp-demos-advice-describe-function-1)
      (advice-add #'helpful-update :after #'elisp-demos-advice-helpful-update))
    (use-package highlight-quoted
      :hook (emacs-lisp-mode . highlight-quoted-mode))
    (use-package highlight-defined
      :hook (emacs-lisp-mode . highlight-defined-mode))
    (use-package easy-escape
      :hook (emacs-lisp-mode . easy-escape-minor-mode)))
#+end_src
** Faust
#+begin_src emacs-lisp
    (use-package faustine
      :mode ("\\.dsp\\'" . faustine-mode)
      :bind* (:map faustine-mode-map
                   ("<localleader>c" ("Check syntax" . faustine-syntax-check))
                   ("<localleader>d" ("Diagram" . faustine-diagram))
                   ("<localleader>s" ("Source code" . faustine-source-code)))
      :config
      (defvar ac-modes nil)
      (defvar ac-sources nil))
#+end_src
** GDScript
#+begin_src emacs-lisp
  (use-package gdscript-mode
    :hook (gdscript-mode . lsp-deferred)
    :bind* (:map gdscript-mode-map
                 ("<localleader>o" ("Open project in Godot" . gdscript-godot-open-project-in-editor))
                 (:prefix "<localleader>d"
                          :prefix-map +debug
                          ("a" ("Add breakpoint" . gdscript-debug-add-breakpoint))
                          ("d" ("Remove breakpoint" . gdscript-debug-remove-breakpoint))
                          ("c" ("Continue" . gdscript-debug-continue))
                          ("n" ("Next" . gdscript-debug-next))
                          ("s" ("Step" . gdscript-debug-step)))))
#+end_src
** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :init
    (with-eval-after-load 'projectile
      (add-to-list 'projectile-project-root-files "stack.yaml")))

  (use-package lsp-haskell
    :hook ((haskell-mode-local-vars haskell-literate-mode-local-vars) . lsp-deferred)
    :after lsp-mode
    :custom
    (lsp-haskell-formatting-provider "fourmolu"))
#+end_src
** HTML
#+begin_src emacs-lisp
  (use-package web-mode
    :after smartparens
    :mode "\\.[px]?html?\\'"
    :mode "\\.\\(?:tpl\\|blade\\)\\(?:\\.php\\)?\\'"
    :mode "\\.erb\\'"
    :mode "\\.[lh]?eex\\'"
    :mode "\\.jsp\\'"
    :mode "\\.as[cp]x\\'"
    :mode "\\.ejs\\'"
    :mode "\\.hbs\\'"
    :mode "\\.mustache\\'"
    :mode "\\.svelte\\'"
    :mode "\\.twig\\'"
    :mode "\\.jinja2?\\'"
    :mode "\\.eco\\'"
    :mode "wp-content/themes/.+/.+\\.php\\'"
    :mode "templates/.+\\.php\\'"
    :hook (web-mode . lsp-deferred)
    :hook (web-mode . (lambda ()
                        (when (member web-mode-content-type '("javascript" "jsx"))
                          (setq-local comment-start "//")
                          (setq-local comment-end "")
                          (setq-local comment-start-skip "// *"))))
    :custom
    (lsp-emmet-ls-command '("emmet-language-server" "--stdio"))
    (web-mode-enable-html-entities-fontification t)
    (web-mode-auto-close-style 1)
    (web-mode-enable-auto-quoting nil)
    :config
    (sp-local-pair 'web-mode "<" ">" :unless '(:add (lambda (_id action _context)
                                                      (and (eq action 'insert)
                                                           (eq web-mode-auto-close-style 3)))))
    (setf (alist-get "javascript" web-mode-comment-formats nil nil #'equal)
          "//"))
#+end_src
** JavaScript
#+begin_src emacs-lisp
  (use-package js
    :hook (js-ts-mode . lsp-deferred))

  (use-package typescript-ts-mode
    :hook (typescript-ts-mode . lsp-deferred)
    :custom
    (typescript-ts-mode-indent-offset 4))

  (setq lsp-clients-typescript-prefer-use-project-ts-server t
        lsp-javascript-display-parameter-type-hints t
        lsp-javascript-display-property-declaration-type-hints t
        lsp-javascript-display-return-type-hints t
        lsp-javascript-display-variable-type-hints t
        lsp-eslint-server-command '("vscode-eslint-language-server" "--stdio"))
#+end_src
** JSON
#+begin_src emacs-lisp
  (use-package json-ts-mode
    :hook (json-ts-mode . lsp-deferred)
    :custom
    (json-ts-mode-indent-offset 4))
#+end_src
** Julia
#+begin_src emacs-lisp
  (use-package julia-ts-mode
    :mode "\\.jl$")

  (use-package julia-snail
    :hook (julia-ts-mode . julia-snail-mode)
    :bind
    (:map julia-snail-mode-map
          ("<localleader>'" ("Snail" . julia-snail))
          ("<localleader>a" ("Activate package" . julia-snail-package-activate))
          ("<localleader>d" ("Documentation at point" . julia-snail-doc-lookup))
          ("<localleader>r" ("Update module cache" . julia-snail-update-module-cache))
          (:prefix "<localleader>e"
                   :prefix-map +eval
                   ("b" ("Buffer" . julia-snail-send-buffer-file))
                   ("l" ("Line" . julia-snail-send-line))
                   ("r" ("Region" . julia-snail-send-region))))
    (:map julia-snail-repl-mode-map
          ("<localleader>a" ("Activate package" . julia-snail-package-activate))
          ("<localleader>d" ("Documentation at point" . julia-snail-doc-lookup))
          ("<localleader>m" ("Go back" . julia-snail-repl-go-back))
          ("<localleader>r" ("Update module cache" . julia-snail-update-module-cache))))

  (use-package lsp-julia
    :after lsp-mode
    :hook (julia-ts-mode . lsp-deferred))
#+end_src
** Lua
#+begin_src emacs-lisp
  (use-package lua-mode
    :hook (lua-mode . lsp-deferred)
    :custom
    (lua-indent-level 4))

  (use-package fennel-mode
    :mode "\\.fnl"
    :hook (lua-mode . antifennel-mode)
    :bind*
    (:map fennel-mode-map
          ("<localleader>r" ("REPL" . fennel-repl))
          ("<localleader>c" ("Compile buffer" . fennel-view-compilation))
          ("<localleader>f" ("Format buffer" . fennel-format))
          ("<localleader>m" ("Expand macro" . fennel-macroexpand)))
    :config
    (with-eval-after-load 'apheleia
      (push '(fnlfmt . ("fnlfmt" "-"))
            apheleia-formatters)
      (push '(fennel-mode . fnlfmt)
            apheleia-mode-alist))
    (use-package flymake-fennel
      :hook (fennel-mode . flymake-fennel-setup)))

  (setq lsp-clients-lua-language-server-command '("lua-language-server"))
#+end_src
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . lsp-deferred)
    :mode ("/README\\(?:\\.md\\)?\\'" . gfm-mode)
    :bind* (:map markdown-mode-map
                 ("<localleader>'" ("Edit block" . markdown-edit-code-block)))
    :custom
    (markdown-enable-math t)
    (markdown-enable-wiki-links t)
    (markdown-italic-underscore t)
    (markdown-asymmetric-header t)
    (markdown-make-gfm-checkboxes-buttons t)
    (markdown-fontify-whole-heading-line t)
    :config
    (use-package grip-mode
      :bind* (:map markdown-mode-map
                   ("<localleader>p" ("Preview" . grip-mode)))))
#+end_src
** Nim
#+begin_src emacs-lisp
  (use-package nim-mode
    :hook (nim-mode . (lambda ()
                        (setq-local tab-width 2)
                        (lsp-deferred))))
#+end_src
** Nix
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix"
    :hook (nix-mode . lsp-deferred)
    :bind* (:map nix-mode-map
                 ("<localleader>r" ("REPL" . nix-repl-show)))
    :custom
    (nix-indent-offest 2)
    (lsp-nix-nil-formatter ["alejandra"]))
#+end_src
** Org
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . lsp-deferred)
    :bind
    (:map org-src-mode-map
          ([remap evil-save] . org-edit-src-save))
    :bind*
    (:map org-mode-map
          ([remap origami-toggle-all-nodes] . org-shifttab)
          ("<localleader>s" ("Sort" . org-sort))
          ("<localleader>g" ("Goto" . consult-org-heading))
          ("<localleader>'" ("Edit block" . org-edit-special))
          ("<localleader>t" ("TODO" . org-todo))
          ("<localleader>x" ("Checkbox" . org-toggle-checkbox))
          (:prefix "<localleader>e"
                   :prefix-map +export
                   ("h" ("HTML" . org-html-export-to-html))
                   ("o" ("ODT" . org-odt-export-to-odt))))
    :custom
    (org-cycle-emulate-tab nil)
    (org-eldoc-breadcrumb-separator (concat " " (nerd-icons-mdicon "nf-md-chevron_right") " "))
    (org-enforce-todo-dependencies t)
    (org-export-with-author nil)
    (org-export-with-smart-quotes t)
    (org-export-with-todo-keywords nil)
    (org-fontify-done-headline t)
    (org-fontify-quote-and-verse-blocks t)
    (org-fontify-whole-leading-line t)
    (org-hide-leading-stars t)
    (org-image-actual-width nil)
    (org-indirect-buffer-display 'current-window)
    (org-modules '())
    (org-startup-folded 'overview)
    (org-startup-indented t)
    (org-tags-column 0)
    :config
    (plist-put org-format-latex-options :scale 1.5)
    (add-to-list 'org-file-apps '(directory . emacs))
    (add-to-list 'org-file-apps '(remote . emacs))
    (use-package evil-org
      :hook (org-mode . evil-org-mode))
    (use-package org-contrib)
    (use-package org-cliplink)
    (use-package org-download)
    (use-package org-appear)
    (use-package org-superstar)
    (use-package ob-async)
    (use-package ox-pandoc
      :bind (:map org-mode-map
                  :prefix "<localleader>e"
                  :prefix-map +export
                  ("d" ("DOCX" . org-pandoc-export-to-docx))))
    (use-package org-variable-pitch
      :hook (org-mode . org-variable-pitch-minor-mode)
      :custom
      (org-variable-pitch-fontify-headline-prefix t)
      :config
      (set-face-attribute 'org-variable-pitch-fixed-face nil
                          :family mono-font
                          :height 110)
      (setq org-variable-pitch-fixed-faces (append org-variable-pitch-fixed-faces
                                                   '(line-number
                                                     line-number-current-line
                                                     corfu-default
                                                     highlight-indent-guides-character-face
                                                     lsp-ui-sideline-global
                                                     lsp-ui-sideline-code-action
                                                     org-modern-block-name
                                                     org-modern-date-active
                                                     org-modern-date-inactive
                                                     org-modern-done
                                                     org-modern-horizontal-rule
                                                     org-modern-internal-target
                                                     org-modern-label
                                                     org-modern-priority
                                                     org-modern-radio-target
                                                     org-modern-statistics
                                                     org-modern-symbol
                                                     org-modern-tag
                                                     org-modern-time-active
                                                     org-modern-time-inactive
                                                     org-modern-todo))))
    (use-package org-modern
      :hook (org-mode . org-modern-mode)
      :custom
      (org-modern-block-name `(,(concat (nerd-icons-mdicon "nf-md-chevron_double_right") " ") . ,(concat (nerd-icons-mdicon "nf-md-chevron_double_left") " ")))
      (org-modern-keyword (concat (nerd-icons-mdicon "nf-md-wrench") " "))
      (org-modern-star '("✯" "✵" "✺" "✼" "❁" "❃" "❆")))
    (use-package org-appear
      :hook (org-mode . (lambda ()
                          (add-hook 'evil-insert-state-entry-hook
                                    #'org-appear-manual-start
                                    nil
                                    t)
                          (add-hook 'evil-insert-state-exit-hook
                                    #'org-appear-manual-stop
                                    nil
                                    t)))
      :custom
      (org-appear-trigger 'manual))
    (use-package org-fragtog
      :hook (org-mode . org-fragtog-mode)))
#+end_src
** Python
#+begin_src emacs-lisp
  (use-package python-ts-mode
    :hook (python-ts-mode . lsp-deferred)
    :custom
    (python-indent-guess-indent-offset-verbose nil)
    :config
    (when (and (executable-find "python3")
               (string= python-shell-interpreter "python"))
      (setq python-shell-interpreter "python3")))
#+end_src
** QML
#+begin_src emacs-lisp
  (use-package qml-mode
    :mode "\\.qml$")
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rust-ts-mode
    :hook (rust-ts-mode . lsp-deferred))
#+end_src
** Shell
#+begin_src emacs-lisp
  (use-package sh-script
    :hook (sh-script . lsp-deferred))

  (use-package fish-mode)
#+end_src
** YAML
#+begin_src emacs-lisp
  (use-package yaml-ts-mode
    :hook (yaml-ts-mode . lsp-deferred))
#+end_src
** Zig
#+begin_src emacs-lisp
  (use-package zig-mode
    :hook (zig-mode . lsp-deferred)
    :custom
    (zig-format-on-save nil))
#+end_src

