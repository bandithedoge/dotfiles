;; widgets

(defwidget icon [text]
  (label
    :class "icon"
    :text text
    :limit-width 1))

(defwidget module [?i]
  (box
    :spacing 10
    :space-evenly false
    (icon
      :text i)
    (children)))

(defwidget graph' [value ?i ?text ?critical]
  (module
    :i i
    (box
      :class "graph"
      :width 60
      (overlay
        (graph
          :value value
          :class {value >= critical ? "critical" : ""}
          :time-range "1m"
          :hexpand true)
        text))))


;; variables

(defpoll time
  :interval "1s"
  `date "+%A %d %B %T"`)

(deflisten network
  "bin/network")

(deflisten battery
  "bin/battery")

(deflisten volume
  "bin/volume")

(deflisten tray
  "bin/tray")

;; bar

(defwindow bar
           :geometry (geometry :width "100%" :height "25px")
           :reserve (struts :side "top" :distance "25px")
  (box
    :space-evenly false
    (box
      :halign "start"
      :hexpand true
      :space-evenly false
      :spacing 5
      (box
        :class "workspaces"
        (for ws in {xmonad.workspaces}
          (button
            :class {ws.current ? "workspace-current" : "workspace"}
            :onclick "wmctrl -s ${ws.id - 1}"
            {ws.id})))
      (label
        :text {xmonad.title}))
    (box
      :halign "end"
      :spacing 20
      :space-evenly false
      (eventbox
        :onclick "connman-gtk &"
        (box
          :spacing 20
          :space-evenly false
          (box
            :class {network.ethernet ? "" : "red"}
            (module
              :i {network.ethernet ? "󰈁" : "󰈂"}))
          (box
            :class {network.wifi ? "" : "red"}
            (module
              :i {network.wifi ? "󰖩" : "󰖪"}
              (label
                :visible {network.wifi}
                :text {network.ssid})))))
      (graph'
        :value {EWW_CPU.avg}
        :i "󰘚"
        :text "${round(EWW_CPU.avg, 0)}%"
        :critical 90)
      (graph'
        :value {EWW_RAM.used_mem_perc}
        :i "󰍛"
        :text "${round(EWW_RAM.used_mem / 1024 / 1024, 0)} MB"
        :critical 90)
      (graph'
        :value {EWW_TEMPS.ACPITZ_TEMP1}
        :i "󰔏"
        :text "${EWW_TEMPS.ACPITZ_TEMP1}°C"
        :critical 80)
      (box
        :class {!battery.charging && battery.percentage <= 20 ? "red" : ""}
        (module
          :i {battery.charging ?
              (battery.percentage == 100 ? "󰂅" : "󰢝") :
              (battery.percentage <= 20 ? "󰂎" : "󰁾")}
          (label
            :text "${battery.percentage}%")))
      (eventbox
        :class {volume.muted ? "red" : ""}
        :onmiddleclick "amixer set Master toggle"
        :onrightclick "pavucontrol &"
        (module
          :i {volume.muted ? "󰖁" : "󰕾"}
          (scale
            :value {volume.percentage}
            :min 0
            :max 100
            :width 50
            :onchange "amixer set Master {}%"
            :orientation "h")
          (label
            :text "${volume.percentage}%")))
      (module
        :i "󰥔"
        (label
          :text {time})
        (box
          :width {tray})))))
