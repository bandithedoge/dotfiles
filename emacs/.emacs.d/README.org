#+TITLE: Emacs
#+PROPERTY: header-args :tangle init.el
* Table of Contents :toc:
- [[#personal][Personal]]
- [[#package-management][Package management]]
- [[#keybindings][Keybindings]]
  - [[#evil-mode][Evil-mode]]
  - [[#leader][Leader]]
- [[#functionality][Functionality]]
  - [[#snippets][Snippets]]
  - [[#projectile][Projectile]]
  - [[#version-control][Version control]]
  - [[#pairs][Pairs]]
  - [[#discord-rich-presence][Discord rich presence]]
- [[#ui][UI]]
  - [[#ivy][Ivy]]
  - [[#which-key][which-key]]
  - [[#modeline][Modeline]]
  - [[#autocomplete][Autocomplete]]
  - [[#treemacs][Treemacs]]
  - [[#theme][Theme]]
  - [[#dashboard][Dashboard]]
- [[#languages][Languages]]
  - [[#haskell][Haskell]]
  - [[#htmlcssjs][HTML/CSS/JS]]
  - [[#org][Org]]
- [[#misc][Misc]]
  - [[#custom-variables][Custom variables]]
  - [[#tangle-on-save][Tangle on save]]

* Personal
#+begin_src elisp
  (setq user-full-name "Miko≈Çaj Lercher"
        user-mail-address "bandithedoge@protonmail.com")
#+end_src
* Package management
#+BEGIN_SRC elisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org". "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages")))

  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))

  (unless (package-installed-p 'use-package)
   (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
* Keybindings
** Evil-mode
#+BEGIN_SRC elisp
  (use-package undo-fu)

  ;; evil-mode
  (use-package evil
    :init
    (setq evil-want-keybinding 'nil)
    :config
    (evil-mode 1)
    (evil-set-undo-system 'undo-fu))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+END_SRC
** Leader
#+BEGIN_SRC elisp
  ;; evil-mode leader keybindings
  (use-package evil-god-state)

  (use-package evil-leader
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>"))
  (evil-leader/set-key
    "<SPC>" 'counsel-M-x'
    "f" 'find-file
    "b" 'counsel-switch-buffer
    "S-<SPC>" 'evil-execute-in-god-state
    "/" 'swiper

    "h" 'evil-window-left
    "j" 'evil-window-down
    "k" 'evil-window-up
    "l" 'evil-window-right

    "H" 'evil-window-move-far-left
    "J" 'evil-window-move-very-bottom
    "K" 'evil-window-move-very-top
    "L" 'evil-window-move-far-right

    "s" 'evil-window-split
    "S" 'evil-window-vsplit
    "W" 'evil-window-delete
    "w" 'kill-current-buffer
    "B" 'kill-buffer

    "y" 'yas-insert-snippet
    "g" 'magit
    "t" 'treemacs
    "v" 'evil-visual-block)
#+END_SRC
* Functionality
** Snippets
#+begin_src elisp
  ;; yasnippet
  (use-package yasnippet
    :config
    (yas-global-mode))

  (use-package yasnippet-snippets)
#+end_src
** Projectile
#+begin_src elisp
  ;; projectile
  (use-package projectile)
#+end_src
** Version control
#+begin_src elisp
  (use-package magit)
#+end_src
** Pairs
#+begin_src elisp
  (electric-pair-mode)
#+end_src
** Discord rich presence
#+begin_src elisp
  (use-package elcord
    :config
    (elcord-mode))
#+end_src
* UI
** Ivy
*** TODO Fix search and order
#+begin_src elisp
  ;; ivy autocompletion
  (use-package ivy
    :config
    (ivy-mode 1)
    (setq ivy-re-builders-alist
          '((t . ivy--regex)))
    (setq ivy-height 17
          ivy-wrap t))

  ;; ivy-based menus
  (use-package counsel
    :config
    (counsel-mode 1))

  ;; ivy icons
  (use-package all-the-icons-ivy
    :config
    (all-the-icons-ivy-setup)
    (setq all-the-icons-ivy-file-commands
            '(counsel-find-file)))

  (use-package swiper)
#+end_src
** which-key
#+begin_src elisp
  ;; which-key
  (use-package which-key
    :config
    (which-key-mode))
#+end_src
** Modeline
*** TODO Column and size indicator
#+begin_src elisp
    ;; modeline
    (use-package doom-modeline
      :config
      (doom-modeline-mode 1)
      (setq doom-modeline-height 35
            doom-modeline-bar-width 3
            doom-modeline-enable-word-count t
            doom-modeline-indent-info t))
#+end_src
** Autocomplete
#+begin_src elisp
    ;; company autocompletion
    (use-package company
      :config
      (add-hook 'after-init-hook 'global-company-mode))
#+end_src
** Treemacs
*** TODO Prettier icons
*** TODO No cursor and line number
*** TODO Keybindings
#+begin_src elisp
  ;; treemacs file tree
  (use-package treemacs)
  (use-package treemacs-all-the-icons)
  (use-package treemacs-evil)
  (use-package treemacs-magit)
  (use-package treemacs-projectile)
#+end_src
** Theme
*** TODO Port blueballs
#+begin_src elisp
  ;; theme
  (use-package solaire-mode
    :config
    (solaire-global-mode +1))
  (use-package doom-themes)
  (load-theme 'doom-dracula t)

  ;; line numbers
  (global-display-line-numbers-mode)
  (setq display-line-numbers 'relative)
  ;; highlight current line
  (global-hl-line-mode)
  ;; hide ui elements
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)

  ;; rainbow delimiters
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  ;; font
  (set-face-attribute 'default nil :font "FiraCode Nerd Font")
#+end_src
** Dashboard
#+begin_src elisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook))
#+end_src
* Languages 
** Haskell
#+begin_src elisp
  ;; haskell
  (use-package haskell-mode)
  (use-package company-ghc)
#+end_src
** HTML/CSS/JS
#+begin_src elisp
  ;; html/css/js
  (use-package web-mode)
  (use-package company-web)
#+end_src
** Org
*** TODO Evil TODO item control
*** TODO Monospace line numbers
#+begin_src elisp
  ;; org mode
  (use-package org
    :config
    (add-hook 'org-mode-hook 'org-indent-mode))

  ;; org evil keybindings
  (use-package evil-org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode))

  ;; org table of contents
  (use-package toc-org
    :config
    (add-hook 'org-mode-hook 'toc-org-mode))

  ;; pretty org headings
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook #'org-bullets-mode))

  ;; pretty org fonts
  (use-package org-variable-pitch
    :config
    (add-hook 'org-mode-hook 'org-variable-pitch-minor-mode))

  ;; pretty org links
  (use-package org-link-beautify
    :config
    (org-link-beautify-mode 1))
#+end_src
* Misc
** Custom variables
#+begin_src elisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(safe-local-variable-values
   '((eval add-hook 'after-save-hook
	   (lambda nil
	     (if
		 (y-or-n-p "Tangle?")
		 (org-babel-tangle)))
	   nil t))))
#+end_src
** Tangle on save
;; Local Variables: 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:
