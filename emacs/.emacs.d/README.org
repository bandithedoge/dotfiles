#+TITLE: Emacs
#+PROPERTY: header-args :tangle init.el
This is my configuration file for GNU Emacs in an Org document. A lot of it is tastefully stolen from [[https://github.com/hlissner/doom-emacs][Doom Emacs]], of which I used to be a user. I use it on both my Hackintosh desktop and Arch Linux laptop. I try to keep it as OS-agnostic as possible with very few OS-specific settings.
* Table of Contents :toc:
- [[#personal][Personal]]
- [[#package-management][Package management]]
- [[#keybindings][Keybindings]]
  - [[#evil][Evil]]
  - [[#leader][Leader]]
- [[#functionality][Functionality]]
  - [[#snippets][Snippets]]
  - [[#projectile][Projectile]]
  - [[#version-control][Version control]]
  - [[#pairs][Pairs]]
  - [[#discord-rich-presence][Discord rich presence]]
  - [[#terminal-emulator][Terminal emulator]]
  - [[#pdf-viewer][PDF viewer]]
  - [[#syntax-checker][Syntax checker]]
  - [[#spell-checker][Spell checker]]
- [[#ui][UI]]
  - [[#ivy][Ivy]]
  - [[#ace][Ace]]
  - [[#which-key][which-key]]
  - [[#modeline][Modeline]]
  - [[#autocomplete][Autocomplete]]
  - [[#treemacs][Treemacs]]
  - [[#theme][Theme]]
  - [[#fonts][Fonts]]
  - [[#ui-elements][UI elements]]
  - [[#dashboard][Dashboard]]
  - [[#indentation][Indentation]]
- [[#languages][Languages]]
  - [[#haskell][Haskell]]
  - [[#web][Web]]
  - [[#javascript][JavaScript]]
  - [[#vue][Vue]]
  - [[#python][Python]]
  - [[#org][Org]]
- [[#misc][Misc]]
  - [[#typing-game][Typing game]]
  - [[#custom-variables][Custom variables]]
  - [[#tangle-on-save][Tangle on save]]

* Personal
#+begin_src emacs-lisp
  (setq user-full-name "Miko≈Çaj Lercher"
        user-mail-address "bandithedoge@protonmail.com")
#+end_src
* Package management
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("gnu" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))

  (unless (package-installed-p 'use-package)
   (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC
* Keybindings
** Evil
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu)

  (use-package evil
    :init (setq evil-want-keybinding 'nil
                evil-respect-visual-line-mode t)
    :config
    (evil-mode 1)
    (evil-set-undo-system 'undo-fu)
    (use-package evil-collection
      :after evil
      :config (evil-collection-init))
    (use-package evil-commentary
      :config (evil-commentary-mode)))
#+END_SRC
** Leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-god-state)

  (use-package evil-leader
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "<SPC>" 'counsel-M-x'
      "f" 'find-file
      "b" 'counsel-switch-buffer
      "S-<SPC>" 'evil-execute-in-god-state
      "/" 'swiper

      "h" 'evil-window-left
      "j" 'evil-window-down
      "k" 'evil-window-up
      "l" 'evil-window-right

      "H" 'evil-window-move-far-left
      "J" 'evil-window-move-very-bottom
      "K" 'evil-window-move-very-top
      "L" 'evil-window-move-far-right

      "s" 'evil-window-split
      "S" 'evil-window-vsplit
      "W" 'evil-window-delete
      "w" 'kill-current-buffer
      "B" 'kill-buffer

      "y" 'yas-insert-snippet
      "g" 'magit
      "t" 'treemacs
      "'" 'flyspell-correct-wrapper
      "v" 'evil-visual-block))
#+END_SRC
* Functionality
** Snippets
#+begin_src emacs-lisp
  ;; yasnippet
  (use-package yasnippet
    :config
    (yas-global-mode)
    (use-package yasnippet-snippets))
#+end_src
** Projectile
#+begin_src emacs-lisp
  ;; projectile
  (use-package projectile)
#+end_src
** Version control
#+begin_src emacs-lisp
  (use-package magit)
#+end_src
** Pairs
#+begin_src emacs-lisp
  (electric-pair-mode)
#+end_src
** Discord rich presence
#+begin_src emacs-lisp
  (use-package elcord
    :config (elcord-mode))
#+end_src
** Terminal emulator
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src
** PDF viewer
#+begin_src emacs-lisp
  (use-package pdf-tools)
#+end_src
** Syntax checker
#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode)
    (use-package flycheck-inline
      :hook (flycheck-mode . flycheck-inline-mode)))
#+end_src

** Spell checker
#+begin_src emacs-lisp
(use-package flyspell-correct
  :after flyspell
  :hook (org-mode . flyspell-mode)
  :config (use-package flyspell-correct-ivy
             :config (setq flyspell-correct-interface #'flyspell-correct-ivy)))
#+end_src
* UI
** Ivy
*** TODO Fix search and order
#+begin_src emacs-lisp
  ;; ivy autocompletion
  (use-package ivy
    :config
    (ivy-mode 1)
    (setq ivy-re-builders-alist
          '((t . ivy--regex)))
    (setq ivy-height 17
          ivy-wrap t)
    (use-package all-the-icons-ivy
      :config
      (all-the-icons-ivy-setup)
      (setq all-the-icons-ivy-file-commands
            '(counsel-find-file))))

  ;; ivy-based menus
  (use-package counsel
    :config (counsel-mode 1))

  (use-package swiper)
#+end_src
** TODO Ace
#+begin_src emacs-lisp
  (use-package ace-popup-menu
    :config (ace-popup-menu-mode 1))
#+end_src
** which-key
#+begin_src emacs-lisp
  ;; which-key
  (use-package which-key
    :config (which-key-mode))
#+end_src
** Modeline
#+begin_src emacs-lisp
    ;; modeline
    (use-package doom-modeline
      :config
      (doom-modeline-mode 1)
      (setq doom-modeline-height 35
            doom-modeline-bar-width 3
            doom-modeline-enable-word-count t
            doom-modeline-indent-info t))
#+end_src
** Autocomplete
#+begin_src emacs-lisp
  ;; company autocompletion
  (use-package company
    :hook (after-init . global-company-mode)
    :config (use-package company-quickhelp))
#+end_src
** Treemacs
*** TODO Prettier icons
#+begin_src emacs-lisp
  (use-package treemacs
    :config
    (use-package treemacs-all-the-icons)
    (use-package treemacs-evil)
    (use-package treemacs-magit)
    (use-package treemacs-projectile))
#+end_src
** Theme
#+begin_src emacs-lisp
  (use-package solaire-mode
    :hook (after-init . solaire-global-mode)
    :config (solaire-mode-in-minibuffer))

  (add-to-list 'load-path "~/blueballs-emacs")
  (add-to-list 'custom-theme-load-path "~/blueballs-emacs")
  (load-theme 'blueballs-dark t)

  (use-package rainbow-delimiters
    :config (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
** Fonts
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "FiraCode Nerd Font-14")
#+end_src
** UI elements
#+begin_src emacs-lisp
  (global-display-line-numbers-mode t)
  (dolist (mode '(term-mode-hook
                  treemacs-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (global-hl-line-mode)
  (global-visual-line-mode)

  (column-number-mode)
  (size-indication-mode)

  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (use-package dashboard-project-status)
    (dashboard-setup-startup-hook))
#+end_src
** Indentation
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :config (setq highlight-indent-guides-method 'column)
    :hook (prog-mode . highlight-indent-guides-mode))
#+end_src
* Languages 
** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :config (use-package company-ghc))
#+end_src
** Web
#+begin_src emacs-lisp
  (use-package web-mode
    :config (use-package company-web))
  (use-package web-beautify)
#+end_src
** JavaScript
#+begin_src emacs-lisp
(use-package js2-mode
  :config (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (use-package js2-refactor
    :hook js2-mode))
#+end_src
** Vue
#+begin_src emacs-lisp
  (use-package vue-mode)
#+end_src

** Python
#+begin_src emacs-lisp
  (use-package elpy
    :defer t
    :init (advice-add 'python-mode :before 'elpy-enable))
#+end_src
** Org
*** TODO Evil TODO item control
*** TODO Fix TODO items display
*** TODO Variable pitch
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . org-indent-mode) ;; indents text according to heading level, helps a lot with visibility
    :config (setq org-startup-with-inline-images 'inlineimages ;; displays inline images...
                  org-image-actual-width nil) ;; ...without filling up the whole screen
    (use-package evil-org ;; vim-like keybindings for org
      :hook (org-mode . evil-org-mode))
    (use-package toc-org ;; autogenerated table of contents for org documents
      :hook (org-mode . toc-org-mode))
    (use-package org-superstar ;; pretty UTF-8 bullets
      :hook (org-mode . org-superstar-mode)
      :config (setq
                    ;; render leading bullets as spaces, making them invisible
                    org-superstar-leading-bullet ?\s
                    org-superstar-leading-fallback ?\s
                    org-superstar-hide-leading-stars nil
                    ;; TODO items as UTF-8 characters, currently not working
                    org-superstar-todo-bullet-alist `(("TODO" . 9744)
                                                      ("[ ]"  . 9744)
                                                      ("DONE" . 9745)
                                                      ("[X]"  . 9745))))
    (use-package org-link-beautify ;; render links with colors, icons and thumbnails
      :config (org-link-beautify-mode 1))
    (use-package ox-pandoc)) ;; export to other formats using pandoc, requires pandoc installed on the system
#+end_src
* Misc
** Typing game
#+begin_src emacs-lisp
  (use-package monkeytype)
#+end_src

** Custom variables
#+begin_src emacs-lisp
  (custom-set-variables
   '(safe-local-variable-values
     '((eval add-hook 'after-save-hook
             (lambda nil
               (if
                   (y-or-n-p "Tangle?")
                   (org-babel-tangle)))
             nil t))))
#+end_src
** Tangle on save
;; Local Variables: 
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:
